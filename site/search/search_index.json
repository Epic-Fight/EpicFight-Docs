{"config":{"lang":["en","pt","es","ru","ja","zh","ko"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> <p> </p> <p></p> <p> Ensure you verify your Epicfight version before following any guidelines, as all instructions are tailored to the latest release! </p> <ul> <li> <p> 3D Armor ResourcePack</p> <p>Fix glitched textures &amp; models from custom modded armors from other mods through a resourcepack.</p> <p> Custom 3D armor Resource Pack</p> </li> <li> <p> Entity AI/Datapack</p> <p>This page will show you how to go about making a datapack for changing an entity's AI, so it uses epic fight's models, animation and AI.</p> <p> Custom entity datapack</p> </li> <li> <p> Custom Weapon/Armor Datapack</p> <p>Want to make other items/armor use epic fight animations and weight system? Check this page for more information.</p> <p> Custom Weapon/Armor datapack</p> </li> <li> <p> Custom Trail ResourcePacks</p> <p>Enhance your modded weapons with style by seamlessly adding custom trails using the step-by-step instructions in this page.</p> <p> Custom Trails </p> </li> <li> <p> Skill Books Explained</p> <p>Curious about specific skill requirements or seeking insights into attack techniques? Find all the answers on this page.</p> <p> Skills</p> </li> <li> <p> Epic Fight Recipes</p> <p>Curious about the art of crafting Epic Fight Weapons? Be sure to visit this informative page for valuable insights and tips.</p> <p> Recipes</p> </li> <li> <p> Blender 2.79 Tutorial</p> <p>Want to learn blender &amp; create your own animations and movesets? Visit the following page and get started with it !</p> <p> Blender 2.79</p> </li> <li> <p> API Guides</p> <p>If you are a mod developer and want to add Epic Fight compatibility, get started here, this should help you out.</p> <p> API</p> </li> </ul>"},{"location":"API/Migration/","title":"Migration","text":"<p>If you're a mod developer with a mod that targets older, now-incompatible versions of Epic Fight, this guide will help you migrate to the latest version.</p>"},{"location":"API/Migration/#from-2097-20102101-and-newer-versions","title":"From <code>20.9.7</code> \u2192 <code>20.10.2.101</code> and Newer Versions","text":"<p>These breaking changes were introduced in an Epic Fight version that already supports Forge 1.20.1. However, the initial release of NeoForge 1.21.1 already uses the new system, so this guide is only relevant for mod developers who previously supported Epic Fight <code>20.9.7</code> (which was available only for Forge 1.20.1).</p>"},{"location":"API/Migration/#accessors","title":"Accessors","text":"<p>One of the breaking changes introduced in versions newer than <code>20.9.7</code> is the way animations and armatures are registered.</p> <p>Previously, you would register animations directly, like this:</p> <pre><code>@Mod.EventBusSubscriber(modid = YourMod.MOD_ID, bus = Mod.EventBusSubscriber.Bus.MOD)\npublic class YourModAnimations {\n    public static StaticAnimation CUSTOM;\n\n    @SubscribeEvent\n    public static void registerAnimations(AnimationRegistryEvent event) {\n        event.getRegistryMap().put(YourMod.MOD_ID, Animation::build);\n    }\n\n    private static void build() {\n        HumanoidArmature biped = Armatures.BIPED;\n\n        CUSTOM = new StaticAnimation(true, \"biped/living/custom\", biped);\n    }\n}\n</code></pre> <p>But in versions newer than <code>20.9.7</code>, they are registered like this:</p> <pre><code>import yesman.epicfight.api.animation.AnimationManager;\nimport yesman.epicfight.api.animation.AnimationManager.AnimationAccessor;\nimport yesman.epicfight.api.animation.AnimationManager.AnimationRegistryEvent;\nimport yesman.epicfight.gameasset.Armatures.ArmatureAccessor;\n\n@Mod.EventBusSubscriber(modid = YourMod.MOD_ID, bus = Mod.EventBusSubscriber.Bus.MOD)\npublic class YourModAnimations {\n    public static AnimationAccessor&lt;StaticAnimation&gt; CUSTOM;\n\n    @SubscribeEvent\n    public static void registerAnimations(AnimationRegistryEvent event) {\n        event.newBuilder(YourMod.MOD_ID, Animation::build);\n    }\n\n    private static void build(AnimationManager.AnimationBuilder builder) {\n        ArmatureAccessor&lt;HumanoidArmature&gt; armatureAccessor = Armatures.BIPED;\n\n        CUSTOM = builder.nextAccessor(\"biped/living/custom\", (accessor) -&gt; new StaticAnimation(true, accessor, armatureAccessor));\n    }\n}\n</code></pre> <p>The same pattern now applies to armatures as well.</p> <p>Tip</p> <p>We understand that this is a major breaking change and may cause inconvenience, as it affects every Epic Fight addon.</p> <p>However, this change was necessary to resolve existing issues with the previous system. The new approach ensures deferred registration, helping prevent potential problems with the mod loading lifecycle.</p>"},{"location":"API/Starting/","title":"Getting started","text":"<p>If you're a mod developer looking to add Epic Fight compatibility, this guide will help you get started.</p>"},{"location":"API/Starting/#setting-up-your-gradle-build","title":"Setting up your Gradle Build","text":"<p>To seamlessly incorporate EpicFight into your mod project using Gradle and facilitate automatic download using Gradle, simply include the following snippet within your build script (<code>build.gradle</code>):</p>"},{"location":"API/Starting/#1-add-modrinth-forge-maven-repository","title":"1. Add Modrinth Forge maven repository","text":"NeoForge 1.21.1 <pre><code>repositories {\n    exclusiveContent {\n        forRepository {\n            maven {\n                name = \"Modrinth\"\n                url = \"https://api.modrinth.com/maven\"\n            }\n        }\n        filter {\n            includeGroup \"maven.modrinth\"\n        }\n    }\n}\n</code></pre> Forge 1.20.1 <pre><code>repositories {\n    exclusiveContent {\n        forRepository {\n            maven {\n                name = \"Modrinth\"\n                url = \"https://api.modrinth.com/maven\"\n            }\n        }\n        forRepositories(fg.repository)\n        filter {\n            includeGroup \"maven.modrinth\"\n        }\n    }\n}\n</code></pre> <p>Tip</p> <p>A repository is a storage location where your Gradle project fetches libraries using Maven-style coordinates (<code>group:artifact:version</code>).</p> <p>You can also use Curse Forge repository instead of Modrinth repository.</p>"},{"location":"API/Starting/#2-add-epic-fight-mod-dependency","title":"2. Add Epic Fight mod dependency","text":"NeoForge 1.21.1 <pre><code>dependencies {\n    implementation \"maven.modrinth:epic-fight:${epicfight_version}\"\n}\n</code></pre> Forge 1.20.1 <pre><code>dependencies {\n    implementation fg.deobf(\"maven.modrinth:epic-fight:${epicfight_version}\")\n}\n</code></pre>"},{"location":"API/Starting/#how-to-choose-a-version","title":"How to choose a version...","text":"<p>To access a compilation of EpicFight versions at your disposal, refer to the listings on Modrinth</p> <p>Tip</p> <p>For an easier setup of your dependencies, you can click on the version you want to use on Modrinth, then copy either the Version Number or Version ID as the Epic Fight version.</p> <p>For example, <code>21.12.5</code>; then include it in <code>gradle.properties</code>:</p> <pre><code>epicfight_version=21.12.5\n</code></pre> <p></p>"},{"location":"API/Starting/#forge-neoforge-events","title":"Forge / NeoForge Events","text":"<p>Epic Fight event packages by version:</p> Version API Path 1.20.1 (Forge) epicfight/api/forgeevent 1.21.1 (NeoForge) epicfight/api/neoevent <p>Tip</p> <p>The paths above are shortened. The actual package root is  <code>yesman/epicfight/api/...</code>, but we write it as <code>epicfight/api/...</code> for clarity.</p>"},{"location":"API/Starting/#registering-custom-animations","title":"Registering Custom Animations","text":"<p>You can download the Epic Fight Player Animation Rig and use it in Blender to create animations for the Epic Fight player. Once you're done, export them using the Epic Fight Blender Exporter Add-on.</p> <p>Animations made with the Epic Fight Player Animation Rig can be applied to any biped (humanoid) entity. However, they are not compatible with non-humanoid entities such as the Ender Dragon.</p> <p>Tip</p> <p>For more information, refer to \ud83d\udcd8 Starting with Blender 2.79.</p> <p>To import your animations into your mod / resource pack, follow the instructions on Asset Importing page.</p> <p>Here is an example of how to register your custom animations:</p> <pre><code>import yesman.epicfight.api.animation.AnimationManager.AnimationRegistryEvent;\nimport yesman.epicfight.api.animation.AnimationManager.AnimationAccessor;\nimport yesman.epicfight.gameasset.Armatures.ArmatureAccessor;\n\n@EventBusSubscriber(modid = YourMod.MOD_ID)\npublic class Animations {\n    @SubscribeEvent\n    public static void registerAnimations(AnimationRegistryEvent event) {\n        event.newBuilder(YourMod.MOD_ID, Animations::build);\n    }\n\n    // Animation accessors for different animation types\n    public static AnimationAccessor&lt;StaticAnimation&gt; BIPED_IDLE;\n    public static AnimationAccessor&lt;MovementAnimation&gt; BIPED_WALK;\n    public static AnimationAccessor&lt;StaticAnimation&gt; BIPED_FLYING;\n\n    public static AnimationAccessor&lt;ComboAttackAnimation&gt; TRIDENT_AUTO1;\n    public static AnimationAccessor&lt;ComboAttackAnimation&gt; TRIDENT_AUTO2;\n    public static AnimationAccessor&lt;ComboAttackAnimation&gt; TRIDENT_AUTO3;\n\n    // Define the actual animations and their properties\n    private static void build(AnimationManager.AnimationBuilder builder) {\n        ArmatureAccessor&lt;HumanoidArmature&gt; armatureAccessor = Armatures.BIPED;\n\n        BIPED_IDLE = builder.nextAccessor(\"biped/living/idle\", (accessor) -&gt; new StaticAnimation(true, accessor, armatureAccessor));\n        BIPED_WALK = builder.nextAccessor(\"biped/living/walk\", (accessor) -&gt; new MovementAnimation(true, accessor, armatureAccessor));\n        BIPED_FLYING = builder.nextAccessor(\"biped/living/fly\", (accessor) -&gt; new StaticAnimation(true, accessor, armatureAccessor));\n\n        TRIDENT_AUTO1 = builder.nextAccessor(\"biped/combat/trident_auto1\", (accessor) -&gt; new ComboAttackAnimation(0.3F, 0.05F, 0.16F, 0.45F, null, armatureAccessor.get().toolR, accessor, armatureAccessor));\n        TRIDENT_AUTO2 = builder.nextAccessor(\"biped/combat/trident_auto2\", (accessor) -&gt; new ComboAttackAnimation(0.05F, 0.25F, 0.36F, 0.55F, null, armatureAccessor.get().toolR, accessor, armatureAccessor));\n        TRIDENT_AUTO3 = builder.nextAccessor(\"biped/combat/trident_auto3\", (accessor) -&gt; new ComboAttackAnimation(0.2F, 0.3F, 0.46F, 0.9F, null, armatureAccessor.get().toolR, accessor, armatureAccessor));\n    }\n}\n</code></pre> <p>All available animation types are listed in epicfight/api/animation/types.</p> <p>Tip</p> <p>This tutorial assumes you already know how to register events in Forge/NeoForge. The example shown above works only on NeoForge.</p> <p>On Forge, you need to use <code>@Mod.EventBusSubscriber</code> instead of <code>@EventBusSubscriber</code> and explicitly specify the bus \u2014 in this case, it must be the MOD bus.</p>"},{"location":"API/Starting/#playing-the-animation","title":"Playing the animation","text":"<p>Before you can play an Epic Fight animation on an entity, the entity must be patched by Epic Fight. (See the next section for details on how to patch entities.)</p> <p>The following example shows how to play the static Jump animation on an Epic Fight\u2013patched entity when a player right-clicks it:</p> <pre><code>public class YourEntity extends PathfinderMob {\n    // ...\n\n    @Override\n    public InteractionResult mobInteract(Player player, InteractionHand hand) {\n        final boolean isEpicFightModLoaded = ModList.get().isLoaded(\"epicfight\");\n        if (isEpicFightModLoaded) {\n            final LivingEntityPatch&lt;?&gt; entityPatch = EpicFightCapabilities.getEntityPatch(this, LivingEntityPatch.class);\n            entityPatch.playAnimationInstantly(Animations.BIPED_JUMP);\n        }\n        return super.mobInteract(player, hand);\n    }\n}\n</code></pre> <p>Make sure that Epic Fight is either declared as a required dependency in your mods.toml file or that you check for its presence at runtime as shown above. This prevents crashes if the mod isn\u2019t installed.</p>"},{"location":"API/Starting/#patching-a-custom-entity","title":"Patching a custom entity","text":"<p>This tutorial shows how to patch a custom humanoid entity for use with Epic Fight. It assumes you already have the entity set up in vanilla Minecraft, including its registration, renderer, and attributes.</p> <p>You need to register 3 different things:</p> <ul> <li>The patched entity.</li> <li>The armature type for the entity.</li> <li>The patched renderer.</li> </ul>"},{"location":"API/Starting/#1-patching-the-entity","title":"1. Patching the entity","text":"<p>An example patched entity class:</p> <pre><code>public class YourEntityPatch extends HumanoidMobPatch&lt;YourEntity&gt; {\n\n    public YourEntityPatch(YourEntity original) {\n        super(original, Factions.VILLAGER);\n    }\n\n    @Override\n    public void updateMotion(boolean b) {\n        super.commonMobUpdateMotion(b);\n    }\n\n    @Override\n    protected void initAI() {\n        super.initAI();\n\n        this.original.goalSelector.addGoal(\n                1,\n                new AnimatedAttackGoal&lt;&gt;(this, new CombatBehaviors.Builder&lt;&gt;().build(this))\n        );\n        this.original.goalSelector.addGoal(2, new TargetChasingGoal(this, this.getOriginal(), 1.2f, true));\n        this.original.goalSelector.addGoal(3, new RandomStrollGoal(original, 1.0f));\n\n        this.original.targetSelector.addGoal(1, new NearestAttackableTargetGoal&lt;&gt;(original, Player.class, true));\n    }\n\n    public void initAnimator(Animator animator) {\n        super.initAnimator(animator);\n\n        // All available living motions are listed in this enum: https://github.com/Epic-Fight/epicfight/blob/1.21.1/src/main/java/yesman/epicfight/api/animation/LivingMotions.java#L4-L6\n        animator.addLivingAnimation(LivingMotions.IDLE, Animations.BIPED_IDLE);\n        animator.addLivingAnimation(LivingMotions.WALK, Animations.BIPED_WALK);\n        animator.addLivingAnimation(LivingMotions.RUN, Animations.BIPED_RUN);\n        animator.addLivingAnimation(LivingMotions.FALL, Animations.BIPED_FALL);\n        animator.addLivingAnimation(LivingMotions.SIT, Animations.BIPED_SIT);\n        animator.addLivingAnimation(LivingMotions.DEATH, Animations.BIPED_DEATH);\n        animator.addLivingAnimation(LivingMotions.JUMP, Animations.BIPED_JUMP);\n        animator.addLivingAnimation(LivingMotions.SLEEP, Animations.BIPED_SLEEPING);\n        animator.addLivingAnimation(LivingMotions.AIM, Animations.BIPED_BOW_AIM);\n        animator.addLivingAnimation(LivingMotions.SHOT, Animations.BIPED_BOW_SHOT);\n        animator.addLivingAnimation(LivingMotions.DRINK, Animations.BIPED_DRINK);\n        animator.addLivingAnimation(LivingMotions.EAT, Animations.BIPED_EAT);\n    }\n}\n</code></pre> <p>Then, register your patched entity with <code>EntityPatchRegistryEvent</code> and also register its armature to avoid runtime crashes:</p> <pre><code>@EventBusSubscriber(modid = YourMod.MOD_ID)\npublic class YourModEvents {\n    @SubscribeEvent\n    public static void registerPatchedEntities(EntityPatchRegistryEvent event) {\n        event.getTypeEntry().put(YourModEntities.THE_ENTITY.get(), entity -&gt; new YourEntityPatch((YourEntity) entity));\n    }\n\n    @SubscribeEvent\n    public static void commonSetup(FMLCommonSetupEvent event) {\n        event.enqueueWork(YourModEvents::registerEntityTypeArmatures);\n    }\n\n    private static void registerEntityTypeArmatures() {\n        Armatures.registerEntityTypeArmature(YourModEntities.THE_ENTITY.get(), Armatures.BIPED);\n    }\n}\n</code></pre> <p>Tip</p> <p>On Forge 1.20.1, you must manually specify the MOD bus for <code>EntityPatchRegistryEvent</code>.</p>"},{"location":"API/Starting/#2-patching-the-renderer","title":"2. Patching the renderer","text":"<p>An example of a patched entity renderer</p> <pre><code>public class YourEntityPatchRenderer extends PHumanoidRenderer&lt;YourEntity, YourEntityPatch, HumanoidModel&lt;YourEntity&gt;, YourEntityRenderer, HumanoidMesh&gt; {\n    public DummyEntityRendererEfPatch(EntityRendererProvider.Context context, EntityType&lt;?&gt; entityType) {\n        super(Meshes.BIPED, context, entityType);\n    }\n}\n</code></pre> <p>Then, register it on the client side only using the <code>PatchedRenderersEvent.Add</code> event on the MOD bus:</p> <pre><code>@EventBusSubscriber(modid = YourMod.MOD_ID, value = Dist.CLIENT)\npublic class EpicFightClientEvents {\n    @SubscribeEvent\n    public static void registerPatchedEntityRenderers(PatchedRenderersEvent.Add event) {\n        event.addPatchedEntityRenderer(YourModEntities.THE_ENTITY.get(), entityType -&gt; new YourEntityPatchRenderer(\n                        event.getContext(),\n                        entityType\n                )\n        );\n    }\n}\n</code></pre>"},{"location":"API/Starting/#getting-the-patched-entity","title":"Getting the patched entity","text":"<p>You can retrieve the patched entity instance from a vanilla entity using:</p> <pre><code>final YourEntity entity = ...;\nfinal YourEntityPatch entityPatch = EpicFightCapabilities.getEntityPatch(entity, YourEntityPatch.class);\n</code></pre>"},{"location":"API/Starting/#registering-custom-skill-slots","title":"Registering custom skill slots","text":"<p>This example explains how to extend Epic Fight by adding new skill slots through your mod and using them in custom skills.</p> <p>First, define an enum that declares the additional skill slots your mod introduces to Epic Fight. Each enum constant represents a distinct slot \u2014 for example, an extra Passive or Identity slot:</p> <pre><code>public enum YourModSkillSlots implements SkillSlot {\n    PASSIVE4(SkillCategories.PASSIVE),\n    PASSIVE5(SkillCategories.PASSIVE),\n    IDENTITY2(SkillCategories.IDENTITY),\n    ;\n\n    final SkillCategory category;\n    final int id;\n\n    YourModSkillSlots(SkillCategory category) {\n        this.category = category;\n        id = SkillSlot.ENUM_MANAGER.assign(this);\n    }\n\n    @Override\n    public SkillCategory category() {\n        return category;\n    }\n\n    @Override\n    public int universalOrdinal() {\n        return this.id;\n    }\n}\n</code></pre> <p>Ensure that the enum names are globally unique and not shared with other mods. If two mods define a slot with the same name (such as <code>Passive5</code>), the game will crash during startup due to conflicts. Also, avoid naming your enums with existing Epic Fight skill slots, since these built-in slots are always available and should not be redefined.</p> <p>After defining the enum, register it in your mod\u2019s constructor to make Epic Fight recognize the new slots:</p> <pre><code>@Mod(YourMod.MOD_ID)\npublic class YourMod {\n    public static final String MOD_ID = \"your_mod_id\";\n\n    public YourMod() {\n        SkillSlot.ENUM_MANAGER.registerEnumCls(MOD_ID, MoreSkillSlots.class);\n    }\n}\n</code></pre> <p>Next, add translations for these slots in your <code>assets/your_mod_id/lang/en_us.json</code> file. These entries control how the slot names appear in the game\u2019s interface.</p> <pre><code>{\n  \"epicfight.skill_slot.passive4\": \"Passive 4\",\n  \"epicfight.skill_slot.passive5\": \"Passive 5\",\n  \"epicfight.skill_slot.identity2\": \"Identity 2\"\n}\n</code></pre> <p>Once completed, launch the game to verify that your custom skill slots are properly integrated. You can then assign skills to these new slots and utilize them in your mod\u2019s features.</p> <p>For additional information on registering skill categories or implementing custom skill slots, refer to the <code>yesman.epicfight.skill</code> package.</p>"},{"location":"Armor/3Darmor_page1/","title":"3D Armor Fix [Blender 2.79]","text":"<p>In Epic Fight, many custom armors are dysfunctional due to the game's unique model system, which differs from both standard entities and armor. However, the mod provides a model generation algorithm based on custom armors, though it occasionally alters them unfavorably. </p> <p>This guide extensively utilizes Blender, so refer to Blender Basics and Tips and Tricks for comprehensive insights on using Blender effectively, including tips, tricks, and troubleshooting.</p> <p>To replicate in-game armor models accurately, check Remaking armor models in Blockbench if your models aren't ready for Blender patching.</p> <p>For mod pack creators and developers aiming for visually flawless custom armor without altering the source code, this step-by-step process facilitates the creation of properly patched armor compatible with Epic Fight:</p> <p>Required tools: </p> <ul> <li>Blender 2.79 </li> <li>Json Exporter for Blender 2.79 </li> <li>Blender Armor Files </li> </ul>"},{"location":"Armor/3Darmor_page1/#weight-paint-and-vertex-correction","title":"Weight Paint and Vertex Correction","text":"<ol> <li>First, open blender, go to file/import/Wavefront (.obj), and import your armor file you've just created in blockbench.</li> <li> <p>After this, select one armor part to patch. We will patch the head layer first. So we'll select every cube and part that composes the helmet for the archer's armor. For us, the \"head\" and \"headback.001\" are the parts that make up for the helmet so we'll select both and press Ctrl + J to join all of the parts into one single model. </p> <p>Tip</p> <p>To join all parts, you'll have to be in object mode</p> <p> Select Join (Feel free to rename the new joined model the armor part it corresponds to, in our case i later renamed it \"Helmet\"). In these screenshots all the other armor parts are hidden.</p> </li> </ol> <ol> <li>  In object mode, correct the import rotation, and postion by clicking Alt + R &amp; Alt + G. </li> <li>  On edit mode, rotate the model and correct its position to the original location before you reset the rot/pos on object mode. </li> <li>  Now after fixing the import rotation, we'll parent the model to the armature by going to object mode, selecting the helmet model and also the armature, going over to Object/Parent/Armature Deform/With Empty Groups/With Empty Groups. Now You've successfully parented the model to the armature, lets head over to weight paint.  </li> </ol> <p>Tip</p> <p>You can select two things by pressing shift while right clicking them. Make sure both are selected in object mode and not pose or edit mode</p> <p> </p> <ol> <li>  By selecting the helmet model, and switching from object mode to weight paint, we'll finally apply the vertex group deformations so the helmet follows the head while our player plays any animation.  </li> <li>  To apply the weight paint, make sure you can see the vertices and you have wireframe mode enabled like in the following image:  </li> <li>  Now you can choose from a range of brushes to apply the weight paint, but the ones we mainly use is subtract and add  </li> <li>  Select the desired vertex group on the right, the one we'll be working with is the head group as we are patching a helmet.  </li> <li>  Now simply go on your way painting the whole model so it follows the whole head. In the end you'll be able to get something like this:  </li> <li>  You can test to see if you've successfully parented and weight painted the helmet to the head by going over to your armature in pose mode and rotating the head bone around. If your model follows the head bone, then its correct, if not, then please go back a few steps and recheck to see if you've missed something.  </li> </ol>"},{"location":"Armor/3Darmor_page1/#exporting-your-patched-models","title":"Exporting your patched models","text":"<p>Now that you've patched yourt models you'll want to export your work and apply the changes in game. But how can you do that? Well it's really simple.</p> <ol> <li>Make sure you don't have any armor parts or unwanted models on your project and only the desired armor part to be exported like so. </li> </ol> <p>Tip</p> <p>You can't export two armor parts at once, so export one at a time and delete all the other ones</p> <p> </p> <ol> <li>  After cleaning any unwanted models or armor parts that won't be exported, head over to File/Export/Animated Minecraft Model (.json)    </li> <li> Make sure you only have Export Mesh selected as we're only exporting an armor and not an animation or custom armature.    </li> <li> Check the export name to see if it matches the custom armor registry name in-game.    </li> <li> Click Export to Json Minecraft after you are done.    </li> </ol> <p> <p> Version Value 1.16.5 6 1.17.x 7 1.18.2 8 1.19.2 9 1.20.1 15 <p></p>"},{"location":"Armor/3Darmor_page1/#making-the-packmcmeta-file","title":"Making the pack.mcmeta file","text":"<p>First, you'll need to create a pack.mcmeta file. Here's how to do it:</p> <ol> <li> <p>Create the File:    - Start by creating a new text file.    - Rename the file to <code>pack.mcmeta</code>. Ensure that file extensions are visible so you can properly change the extension (e.g., from <code>.txt</code> to <code>.mcmeta</code>).  </p> </li> <li> <p>Edit the File:    - Open the file with a text editor and add the following code for your datapack to function properly:  </p> </li> </ol> <pre><code>{\n    \"pack\":{\n        \"pack_format\":15,\n        \"description\":\"A short description on your pack\"\n        }\n}\n</code></pre>"},{"location":"Armor/3Darmor_page1/#pack_format-values","title":"pack_format Values","text":""},{"location":"Armor/3Darmor_page1/#making-the-folder-path","title":"Making the folder path","text":"<p>To set up the folder structure, follow these steps. Each folder or file must be nested inside the previous one in the hierarchy:  <code>assets  \"modid\"  animmodels  armor  \"registryname\".JSON</code> </p> <ul> <li> <p><code>modid</code>: The mod ID is usually the name of the mod. You can often find it by checking in-game item tooltips (press <code>F3 + H</code> to enable Advanced Tooltips) or by looking at commands or messages related to the mod. For example, if the tooltip for an item shows <code>modid:itemname</code>, the part before the colon <code>(modid)</code> is what you\u2019ll use to name the <code>\"modid\"</code> folder.</p> </li> <li> <p><code>registrynames</code>: To locate an item\u2019s registry name, press <code>F3 + H</code> in-game to enable Advanced Tooltips. Then, hover over the item to view its registry name.</p> </li> </ul> Make a <code>.txt</code> file with the outlined text, then change it's type to <code>.json</code> <p> Other solutions for 3D armor glitches</p>"},{"location":"Armor/3Darmor_page2/","title":"Alternate 3D Armor Fixes","text":"<p>Be ware that these solutions may not be as effective as manually patching armors in blender. </p> <p>These tools are mainly for modpack and mod developers to test their armor. If you want to properly patch armors and make sure they work in-game, go to  3D Armor Fix</p>"},{"location":"Armor/3Darmor_page2/#making-visually-flawless-armor-by-using-armor-debugging-mode","title":"Making visually flawless armor by using armor debugging mode","text":"<p>In Minecraft, you can enable the armor debugging mode by pressing F3+Y. This will create an armor model for every frame to check the result of the model generation algorithm. But it could drop the fps seriously, so I don't recommend turning on this function in normal situations.</p> <p> </p> <p>This message will be shown when you toggle the armor debugging mode.</p>"},{"location":"Armor/3Darmor_page2/#exporting-the-models-as-resource-pack","title":"Exporting the models as resource pack","text":"<p>In the mod config screen. You can see the \"Export Armor Models\" button. It will export all generated armor models in the cache as the resource pack. Then apply the resource pack and you don't have to debug the armor models every time you launch Minecraft.</p> <p> </p>"},{"location":"Armor/3Darmor_page2/#an-alternative-if-previous-solution-doesnt-work","title":"An Alternative, if previous solution doesn't work","text":"<p>There are custom armors that won't be fixed, even when using the debug mode. This is because there are various ways to render custom armor. You can choose the alternative way to at least make them visible.</p> <p>First you have to make them use a default model. You can create your own armor model under,</p> <p> <code>assets/modid/animmodels/armor/item_name.json</code> </p> <p>In the item_name.json file, type this to assign the default model for the armor.</p> <p><pre><code>{\n    \"parent\": \"epicfight:armor/model_name\"\n}\n</code></pre> Allowed model_names are: <code>helmet_default, chestplate_default, leggings_default, boots_default</code></p> <p>Then you can modify the texture of the custom armor to match the default model's texture format.</p> <p> </p> <p>The vanilla armor model's texture mapping</p> <p>Next save your textures but it should avoid overriding the existing texture because it can mess up the vanilla model. Instead you should save your texture under the path: <code>assets/modid/existing_path/epicfight/texturename</code>  For example let's suppose a path is: <code>assets/minecraft/textures/models/armor/iron_layer_1.png</code>.</p> <p>You will use: <code>assets/minecraft/textures/models/armor/epicfight/iron_layer_1.png</code></p>"},{"location":"Armor/3Darmor_page2/#giving-transparency-to-the-custom-armors","title":"Giving transparency to the custom armors","text":"<p>Some custom armors have transparency in their texture. You can make them transparent in battle mode by adding these lines.</p> <pre><code>{\n    \"render_properties\": {\n        \"transparent\": true\n    },\n        \"vertices\": {\n                ...\n        }\n}\n</code></pre>"},{"location":"Armor/3Darmor_page3/","title":"Blockbench Armor Model Remake","text":"<p>No need to recreate armor in Blockbench if you already possess the armor files for the mod you aim to fix.</p> <p>This guide is only meant for those who want to patch armors from other mods, and don't necessarily have the armor models for it. If you are a mod developer and you already have all the armor files in blockbench, you can just export them as OBJs and follow the tutorial on blender.</p> <p>Required tool: </p> <ul> <li>BlockBench (Optional) </li> </ul> <p>After downloading and installing all three softwares, the first thing you'll want to do is, pick a mod that has an armor set you want to patch, and from there try to recreate the model as accurately as possible. One efficient way you can do this, is usually by looking at the armor in-game and getting the textures from the source code of your desired mod.</p> <p>EXAMPLE:</p> <p> </p> <p>Above is the texture file for the archers_armor of the Dungeon Gear Mod. Lets take a look how we can re-create this armor by looking at the texture within Blockbench </p>"},{"location":"Armor/3Darmor_page3/#inside-of-blockbench","title":"Inside of Blockbench","text":"<ol> <li> Create a Generic Model so we can export it to blender later on. Preferably name the model something you can recognize, for example, Archer's Armor.  </li> <li> Ensure that you have the CEM Template Loader plugin properly installed in order to seamlessly import the vanilla models. </li> </ol> <p>Tip</p> <p>You can download plugins under <code>File/Plugins</code> option</p> <p></p> <ol> <li> From there, you'll want to import all vanilla armor models.    </li> </ol> <p>You can import the vanilla armor models under Tools/Load CEM Template/Unsupported Entities</p> <p> </p> <ol> <li> Import the textures, and change the texture size on the project to the same one as the texture.  </li> </ol> <p>Tip</p> <p>You can apply the textures on the model by dragging and dropping it on each armor part group</p> <p> </p> <ol> <li> Now, fix the textures until they are in the correct order and look like the original model. </li> <li> After organizing the textures, press Ctrl + A, and make sure all textures are being used. If you miss any textures, that means you model needs more adjustments and so you'll need to add in extra pieces to the armor.       In our case, the Archer's Armor has an extra part to its hat so we'll need to add in a cube and try to guess its rotation, scale and position based on the in-game armor added by Dungeon's gear and the texture size.  </li> <li> As you can see, after a few changes, we got our model to look like the original one, and now we are ready to move on to blender and to patching each individual part.  </li> <li> Now when exporting you armor file, be sure to export it as a .obj, because that's what we'll be using inside blender. </li> </ol>"},{"location":"Guides/page1/","title":"Starting with Blender 2.79","text":"<p>Epic fight uses custom animations for multiple actions in game, from drinking, eating to even attack combos. These animations are handled by Blender, a 3D open source software for modeling, animating, texturing, composition, rendering and video editing.</p> <p>It may seem overwhelming to work with blender, but here I'll only be teaching you the absolute necessary to work with epic fight.</p> <p>Note</p> <p>Epic Fight animations/models are all made in Blender 2.79, but you may opt for newer versions such as Blender 3.6, which we have recently started supporting here</p>"},{"location":"Guides/page1/#installing-blender","title":"Installing blender","text":"<p>To install Blender (2.79) head to the following website:</p> <ul> <li> Blender 2.79</li> </ul> <p>Make sure to select the correct version that corresponds to your Operational System.  (Here we'll be using Win 64x bits)</p>"},{"location":"Guides/page1/#extracting-and-running","title":"Extracting and Running ...","text":"<p>After downloading the correct file from the Blender index, you can extract the files using your preferred program.</p> (It's recommended to use a program such as 7-Zip for extracting the files) <p>After extracting the files, verify that Blender runs correctly. To test this, open the folder hierarchy and launch <code>Blender.exe</code>. If a window appears, Blender has been successfully installed.</p>"},{"location":"Guides/page1/#json-exporter","title":"Json exporter","text":"<p>To install the custom Blender Exporter, visit the repository and download the master branch by following these steps:</p> <ul> <li> Blender Json Exporter</li> </ul> <p> <p></p> <ol> <li>Go to the folder where blender is installed, move all files under /2.79/scripts/addons/xxxxxxxx/.(You should create a new folder, represented here by the multiple Xs, it's naming does not matter)</li> <li>Go to Blender  File  User Preferences  Add-ons, And find an add-on named \"Import-Export: Minecraft Model Json Exporter\"</li> <li>Check the checkbox and Click \"Save User Settings\".</li> <li>As you can see when you click to export, you'll be able to generate a json file, in which you can choose to select 3 options, Mesh, Animations and Armature, but we'll see those later.</li> </ol>"},{"location":"Guides/page1/#learning-the-basics","title":"Learning the basicsControlsSaving &amp; ExportingKeyframe Saving","text":"<p>First of all we should learn how to actually work with blender, how to move around a few useful keybinds and what each mode does.  As a start, we'll be learning how to move around with blender.</p> <ul> <li> <p></p> <p>Navigation Controls: Camera rotation: Mouse3 Camera position: Shift + Mouse3 Zoom In/Out: Scroll Up / Scroll Down Front, side, top views: NumPad 0-9</p> <p>Object Mode: Select: Mouse2 Delete selected object: X or Del Join selected objects: Ctrl + J Grab/move object: G</p> <p>Edit Mode: Loop Cut: Ctrl + R</p> </li> <li> <p></p> <p>Right under file, you'll find the following window:  You may export, save &amp; do various other needed tasks through this window in the following guides.</p> </li> <li> <p></p> <p>Keyframes are an essential part of animation, allowing you to save a bone\u2019s rotation, location, and scale at specific points in time. Rot = rotation Loc = location</p> <p>Using visual keyframe saving records the bone's attributes exactly as they appear, including any changes made by bone constraints. This means that visual keyframes capture the final, visually altered positions, rotations, and scales of bones influenced by constraints.</p> <p>In contrast, standard keyframe saving does not include these bone constraint effects. It only records the bone's raw transformation data (rotation, location, and scale), ignoring any alterations caused by constraints. This can be useful if you want more control over the underlying transformations without being affected by visual adjustments from constraints.</p> </li> </ul>"},{"location":"Guides/page1/#moving-your-camera","title":"Moving your camera","text":"<p>To move your camera rotation, you can press your mouse wheel and move your mouse with it pressed. After you do that, you'll probably see something similar to this:</p> <p> </p> <p>Now if you want to move your camera's location you can press your middle mouse button + Shift. You'll be able to see something like this:</p> <p>   Good work! Now you know how to move your camera around. </p>"},{"location":"Guides/page1/#edit-object-mode-basics","title":"Edit &amp; Object mode basics","text":"<p>In short, edit mode is used to edit objects geometry and their origin location, rotation and scale in a project. We often use edit mode to change models in ways that are simply not practical with Object mode. One of the ways we use edit mode is to add in Bones to a rig and their origin position (and by origin position i mean their actual position, scale, rotation in a project, where they'll go after you reset their object location rotation and scale)</p> <p>So lets say you have a rig and you want to create a new animation, instead of having to manually change each and every bone to a new position, you can simply reset the whole skeleton to their original position that was set in Edit Mode, and from there work on a new animation, improving your workflow and making it easier to create new animations or frames to already existing ones.</p> <p>We rarely use Object mode in epic fight, but basically, Object mode allows you to edit objects individually. You are also able to resize, change location and rotation of objects in Object Mode, without affecting their origin).</p> <ul> <li> <p></p> <p>Watch this video if you want a more in depth explanation on what Edit and Object Mode does.</p> </li> </ul>"},{"location":"Guides/page1/#pose-mode","title":"Pose mode","text":"<p>We often use pose mode in animating as its very handy when it comes to making the workflow faster. With pose mode you are able to change each and every bone's individual coordinate and rotation. Pose mode is mainly made to be used with Bones as it can easily change characters's poses.</p> <ul> <li> <p></p> <p>Here's a video for you to watch so you can have a visual explanation of what you can do with pose mode.</p> </li> </ul>"},{"location":"Guides/page1/#adding-bones-and-deleting-stuff","title":"Adding bones and Deleting stuff","text":"To add bones, switch to Object Mode and navigate to Add Armature Single Bone   Alternatively, you can press Shift + A in Object Mode to quickly open the Add menu and select Single Bone.   To delete an object, simply press Del on your keyboard, and a confirmation prompt will appear to confirm the deletion.      <p><code>.zip</code></p>"},{"location":"Guides/page1/#starting-with-animations","title":"Starting with animations","text":"<p>You can download the Epic Fight Player Animation Rig and use it in Blender to create animations for the Epic Fight player. Once you're done, export them using the Epic Fight Blender JSON Exporter Add-on.</p> <p>Animations made with the Epic Fight Player Animation Rig can be applied to any biped (humanoid) entity. However, they are not compatible with non-humanoid entities such as the Ender Dragon.</p> <p>Begin by navigating to the animations tab in your project. Next, switch to Pose mode and ensure that you've created a new action. In Dope Sheet, use Action Editor to create a new action. <p>Tip</p> <p>You\u2019ll likely start in the default view, so open the collapsible menu and choose the Animations tab.               The tab selection menu is usually located at the top of your screen as well.</p>          Create your initial frame by pressing i and saving your chosen settings.        The Dope Sheet provides a comprehensive view of your animation's keyframes, allowing you to easily identify the position of each frame within your animation. You can also fine-tune your animation by adjusting the starting and ending frames directly in the timeline, giving you full control over the flow and timing of your sequence. In the timeline, you can precisely set the starting and ending frames of your animation, giving you control over its duration and flow. You can use the buttons on the Blender timeline to play your animation, as well as navigate through frames by moving forward or backward one frame at a time, giving you precise control over your animation\u2019s playback. <p>You may also use the  and  arrows on your keyboard to go to the next frame.</p>"},{"location":"Guides/page1/#autokey","title":"AutoKey","text":"AutoKey is a useful tool that automatically registers keyframes whenever you make changes to a bone or object in your scene, streamlining the animation process and ensuring that every adjustment is captured without manual keyframe placement."},{"location":"Guides/page1/#viewport","title":"Viewport","text":"<p>You can change the viewport mode to view objects from different perspectives, each offering specific visual insights to aid your work.                For instance, the Wireframe viewport mode removes textures and shows only the object's wireframe structure. This is especially useful for seeing the shape and layout of an object in a transparent way, allowing you to clearly view and understand elements behind or within it.                The Texture viewport mode, on the other hand, displays objects with their full textures, showing all the colors, patterns, and surface details as they would appear in the final render. This mode is ideal for refining textures and verifying how they map onto the object.                Finally, the Solid viewport mode displays the object in a neutral gray tone without textures. This plain view is commonly used to analyze the object\u2019s form, lighting, and shadow projections without the distraction of textures, helping you check how shadows interact with the object's surface.</p> <ul> <li> <p>Viewport Breakdown Tutorial</p> <p></p> </li> </ul>"},{"location":"Guides/page1/#weight-paint","title":"Weight paint","text":"<p>Weight paint is probably one of the most used tools when it comes to creating a rig. It serves as a way to determine the weight of influence that each vertex group (bone) will have over a vertex. It allows you to basically make the animation process easier.</p> <p>Imagine if you had to manually transform the mesh of your object for each pose and key frame you wanted to make, it would take months to make a single animation as it would be very time consuming, so Bones where created so now you only need to interact with them, but how do you determine the mesh transformations depending on each bone, well thatsll all calculated by weight paint.</p> <p>There isn't a proper way to show you how to deal with weight paint, but basically, when assigning a bone group to an object it'll create a vertex group which you can set the weight for each vertex. Mind that all vertecies need to be assigned to a vertex group for it to be exportable.</p> <p>Here are two videos explaining how to use / what weight paint does. (I recommend watching them in order)</p> <p> <p></p>"},{"location":"Guides/page1/#adding-bends","title":"Adding Bends","text":"<p>Epic Fight entities and players use different player models and animations which are only made possible by using bends. Bends allow for a more natural and realistic movements.  </p> <p>One  of the biggest questions we get from developers is how do bends work and how they can be reproduced for other custom entities or armor... Basically bends are made of three loop cuts places in the same position that can then be expanded </p> <p>To add bends for entities, armors or anything so it has compatibility with epic fight, basically create 3 loop cuts (Ctrl + R), the first should be exactly on top of the knee bone (if adding bends for arms or chestplates, it would be on top of the elbow bone instead), then secondly create two more loop cuts, one of the top of the middle loop cut and the other below the middle loop cut. After that, place those two loop cuts on top of the middle one. Then from there you'll want to paint the top part and the part where said bone will bend to.</p> <p>Tip</p> <ul> <li>Ctrl + numpad_plus - select the next set of vertices </li> <li>Ctrl + numpad_minus - unselect the last selected set of vertices </li> </ul> <ul> <li> <p></p> <p>Watch this quick video we've arranged so you can have a more visual experience of how to add bends.</p> <p>Warning</p> <p>The KeyBinds used in the video/referenced here may not work on newer versions of blender like 3.6</p> </li> </ul>"},{"location":"Guides/page1/#uv-mapping-texturing","title":"UV Mapping &amp; Texturing","text":"<p>UV Mapping stands for \"UV coordinates mapping\" in the field of computer graphics and 3D modeling. It is a technique used to map 2D textures onto 3D surfaces of a computer-generated object. The term \"UV\" refers to the 2D coordinate system used to represent the 2D texture image, where U represents the horizontal axis and V represents the vertical axis.</p>          In epic fight, we mostly use UV mapping to fix issues in between bends, where blender may have issues determining where to use certain parts of the texture, and to properly map out texture for each plane side of a cube.           You can change your screen to UV editting mode by going to the top of your screen and changing the screen layout.      <ul> <li> <p></p> <p>You can create new textures by clicking this button</p> </li> <li> <p></p> <p>You can also assign existing textures by clicking this</p> </li> </ul>"},{"location":"Guides/page1/#fixing-issues-in-between-bends-loop-cuts","title":"Fixing issues in between bends (Loop Cuts)","text":"For developers or creators working on entity models, adding bends to your models is often essential. However, a common issue you might encounter is Blender's difficulty in determining the appropriate texture for the narrow space between loop cuts.            This can result in unintended visual artifacts or texture stretching, as Blender struggles to decide how to apply the texture within these tight, angled sections. Understanding and addressing this challenge is crucial for achieving smooth, high-quality textures on complex models.            A few solutions to this issue include arranging the loop cut spaces carefully by stretching the UV maps toward either the top or bottom, depending on the specific part you are working on.            The first step is to switch your window to Edit Mode. If you're unfamiliar with how to use and navigate Edit Mode, you can learn more by checking out the Edit &amp; Object Mode Basics guide on this page!      <p>This is an example of what you may face when patching armors, making entities or overall adding bends</p>          This issue is easily resolved by scaling the top or bottom faces of the model by a factor of two. Simply press:         <ul> <li>Ctrl + numpad_plus - select the next set of vertices </li> <li>Ctrl + numpad_minus - unselect the last selected set of vertices </li> </ul>             The next step is to extend the UV mappings to align with the upper and lower sections accordingly. For each plane generated between the loop cuts, follow these steps:      <ol> <li>In UV edit mode, Select the planes that have overlapping textures.</li> <li>Extend their vertices to utilize either the upper or lower portions of the texture, depending on their position in the leg or arm bends.</li> </ol> <p> <p>This will ensure each section accurately displays the intended texture details based on its placement in the model. </p> <p>Warning</p> <p>Make sure to select UV selection and display mode to Edge</p>"},{"location":"Guides/page1/#snap-transform","title":"Snap Transform","text":"Snap Transform lets you move objects with precision, making it much easier to align them with one another. Think of it as a virtual ruler that helps you create straight lines and accurate positioning. To enable snapping, simply click the magnet icon located near your 3D orientation transform options."},{"location":"Guides/page1/#x-axis-mirror","title":"X-Axis Mirror","text":"<p>You may find yourself having to make two different animations for one single action. For example, if you wanted to make a \"Holding Torch\" arnimation you'd need to mirror your animation on the X-Axis in order to have both the main and offhand variants of said animation.</p> <p>You are able to do this kind of mirroring by copying the current pose (Ctrl + C), then selecting the right side (Ctrl + i) and finally in a newly created action you can then paste said animation by pressing Shift + Ctrl + V</p> <p>Quote</p> <p>If you want to mirror your animation form the left side to the other side during pose mode you just need to select the whole left side then copy the pose with Ctrl+C.</p> <p>After that press Ctrl+i to go to your right side and finally press Shift+Ctrl+V to paste the the X flipped pose, that way you'll have a perfect mirror of both side</p> <p>Reference</p>"},{"location":"Guides/page1/#transparency","title":"Transparency","text":"Some objects imported into Blender might display incorrectly, often due to material settings that don\u2019t align with Blender\u2019s rendering system. When this happens, the object may appear partially or entirely opaque, with missing or improperly rendered transparent parts, especially if transparency is a crucial aspect of the model.          To resolve this, start by entering Object Mode. Then, navigate to the Materials tab in the Properties panel. In the settings for your selected material, find and enable the Transparency option. Adjust the Alpha setting as needed to control the level of transparency for the material, allowing the object to display as intended. This fix ensures that objects relying on transparency or opacity settings retain their correct visual appearance in Blender.          You may also refer to the resource linked below for additional guidance:                   Black textures where it should be transparent.          <p>Quote</p> <p>Materials in Blender can be set to be transparent, so that light can pass through any objects using the material. Transparency is controlled using an \u201calpha\u201d channel, where each pixel has an additional value, range 0-1, in addition to its RGB color values. If alpha=0, then the pixel is transparent, and the RGB values for the surface contribute nothing to the pixel\u2019s appearance; for alpha=1, the surface is fully opaque, and the color of the surface determines the final color of the pixel.</p> <p> Transparency panel. </p> <p>In Blender, there are three ways in which the transparency of a material can be set: Mask, Z-Buffer and Raytrace. Each of these is explained in more detail below. The Material Preview option with a sphere object gives a good demonstration of the capabilities of these three options.</p> <p> Reference</p>"},{"location":"Guides/page1/#_1","title":"Starting with Blender 2.79","text":"<ul> <li> <p>That's it for now !</p> <p>If you're considering diving into Blender and beginning your learning journey, I highly recommend exploring the comprehensive tutorial playlist curated by Derek Banas.</p> <p></p> </li> </ul>"},{"location":"Guides/page2/","title":"Starting with Blender 3.6","text":"<p>Epic fight uses custom animations for multiple actions in game, from drinking, eating to even attack combos. These animations are handled by Blender, a 3D open source software for modeling, animating, texturing, composition, rendering and video editing.</p> <p>It may seem overwhelming to work with blender, but here I'll only be teaching you the absolute necessary to work with epic fight.</p>"},{"location":"Guides/page2/#installing-blender","title":"Installing blender","text":"<p>To install Blender (2.79) head to the following website:</p> <ul> <li> Blender 3.6</li> </ul> <p>Make sure to select the correct version that corresponds to your Operational System.  (Here we'll be using Win 64x bits)</p>"},{"location":"Guides/page2/#extracting-and-running","title":"Extracting and Running ...","text":"<p>After downloading the correct file from the Blender index, you can extract the files using your preferred program.</p> (It's recommended to use a program such as 7-Zip for extracting the files) <p>After extracting the files, verify that Blender runs correctly. To test this, open the folder hierarchy and launch <code>Blender.exe</code>. If a window appears, Blender has been successfully installed.</p>"},{"location":"Guides/page2/#json-exporter","title":"Json exporter","text":"<p>To install the custom Blender Exporter, visit the repository and download the master branch by following these steps:</p> <ul> <li> Blender Json Exporter</li> </ul> <p> <p></p> <ol> <li>Go to the folder where blender is installed, move all files under /3.6/scripts/addons/xxxxxxxx/.(You should create a new folder, represented here by the multiple Xs, it's naming does not matter)</li> <li>Go to Blender  File  User Preferences  Add-ons, And find an add-on named \"Import-Export: Minecraft Model Json Exporter\"</li> <li>Check the checkbox and Click \"Save User Settings\".</li> <li>As you can see when you click to export, you'll be able to generate a json file, in which you can choose to select 3 options, Mesh, Animations and Armature, but we'll see those later.</li> </ol> <p> This page is still being worked on, help us contributing to it on our discord </p>"},{"location":"Guides/page3/","title":"Asset Importing","text":"<ul> <li> <p>Importing Assets Tutorial</p> <p></p> </li> </ul>"},{"location":"Guides/page3/#accessing-the-import-screen","title":"Accessing the Import Screen","text":"<p>You can access the asset import screen via the selection menus for animations or models (both in the Weapon Type &amp; the Mob Capability editor screens).</p> <p>See the images below in weapon types editor:</p> <p></p> <p></p> <p> You should be left with the following screen:</p> <p>Mind that the animation/model files to be imported should be exported from blender utilizing our custom exporter. See more about blender &amp; how to start utilizing it with epic fight Here</p>"},{"location":"Guides/page3/#preview-animations-and-armatures","title":"Preview, Animations and Armatures","text":"<p>Imported models will appear in the preview screen. If your model file includes armature data, it\u2019s automatically added to the Armatures grid.</p> <p>Models with the same hierarchy in Blender can share an armature. You don\u2019t need to re-import an armature if it already exists. (Example: Player and Vindicator models in wireframe mode)</p>"},{"location":"Guides/page3/#configure-animation-settings","title":"Configure Animation Settings","text":"<ul> <li> <p>Select an animation type:    - Static Animations: Used for basic living motions.    - Movement Animations: Adjust playback speed based on player movement.    - Attack Animations: Includes strike phases to deal damage.    (Define properties like transition time, repeat, and priority.)</p> </li> <li> <p>Layering System    - Understand that Epic Fight has four animation layers: Base and three Composite layers (lowest, middle, highest priority).    - Composite layers can include joint masks to apply animations selectively. (Example: Greatsword animations in Idle vs. Running states) </p> </li> </ul>"},{"location":"Guides/page3/#attack-animations","title":"Attack Animations","text":"<ol> <li>Defining Phases    - Anticipation: Players can track targets.    - Pre-delay: Movement is locked.    - Contact: Colliders strike entities.    - Recovery: Allows actions like dodging or skills.    - End: Returns to living animations.  </li> <li>Collider Settings    - Set colliders for animations or use default item capabilities.    - A red box appears in the preview to indicate collision points.</li> </ol>"},{"location":"Guides/page3/#additional-animation-type-information","title":"Additional Animation Type information","text":"<ul> <li>Basic Attack Animations: For weapon combo sequences.</li> <li>hort and Long Hit Animations: Handle stun effects with variable durations.</li> <li>Knockdown Animations: For knockdown stuns, with dodge skills reducing stun time.</li> </ul>"},{"location":"Guides/Entities/page1/","title":"Custom entity datapack","text":"<p>Epic Fight isn't normally compatible with other mods, especially with the entities. So you have to manually define the entity's model, animations, and other attribute values. This can be achieved by using Datapack.</p> <p> <p> Version Value 1.16.5 6 1.17.x 7 1.18.2 8 1.19.2 9 1.20.1 15 <p></p>"},{"location":"Guides/Entities/page1/#making-the-packmcmeta-file","title":"Making the pack.mcmeta file","text":"<p>First, you'll need to create a pack.mcmeta file. Here's how to do it:</p> <ol> <li> <p>Create the File:    - Start by creating a new text file.    - Rename the file to <code>pack.mcmeta</code>. Ensure that file extensions are visible so you can properly change the extension (e.g., from <code>.txt</code> to <code>.mcmeta</code>).  </p> </li> <li> <p>Edit the File:    - Open the file with a text editor and add the following code for your datapack to function properly:  </p> </li> </ol> <pre><code>{\n    \"pack\":{\n        \"pack_format\":15,\n        \"description\":\"A short description on your pack\"\n        }\n}\n</code></pre>"},{"location":"Guides/Entities/page1/#pack_format-values","title":"pack_format Values","text":""},{"location":"Guides/Entities/page1/#defining-the-json-file-and-directory-structure","title":"Defining the JSON File and Directory Structure","text":"<p>Before creating a JSON file, it's important to determine the registry name of the entity you want to make compatible. In Minecraft, you can find a list of all currently registered entities by using the <code>/summon</code> command in the game. When you type <code>/summon</code> and press the Tab key, it will display a list of available entity registry names. These names are what you will use to reference the entities in your JSON file.</p> <p> </p> <p>Most registry names follow the format <code>modid:entityname</code>, where <code>modid</code> represents the identifier for the mod, and <code>entityname</code> is the specific name of the entity. Once you have identified the registry name, you can create the JSON file in the appropriate directory structure based on this format. The file should be placed under the following path: <code>data/\"modid\"/epicfight_mobpatch/\"entityname\".json</code></p>"},{"location":"Guides/Entities/page1/#obtaining-armature-animation-and-model-tags-","title":"Obtaining armature, animation and model tags -","text":"Model Entries <p>src/main/java/yesman/epicfight/api/client/model/Meshes.java<pre><code>    public static HumanoidMesh ALEX;\n    public static HumanoidMesh BIPED;\n    public static HumanoidMesh BIPED_OLD_TEX;\n    public static HumanoidMesh BIPED_OUTLAYER;\n    public static HumanoidMesh VILLAGER_ZOMBIE;\n    public static CreeperMesh CREEPER;\n    public static EndermanMesh ENDERMAN;\n    public static HumanoidMesh SKELETON;\n    public static SpiderMesh SPIDER;\n    public static IronGolemMesh IRON_GOLEM;\n    public static HumanoidMesh ILLAGER;\n    public static VillagerMesh WITCH;\n    public static RavagerMesh RAVAGER;\n    public static VexMesh VEX;\n    public static PiglinMesh PIGLIN;\n    public static HoglinMesh HOGLIN;\n    public static DragonMesh DRAGON;\n    public static WitherMesh WITHER;\n</code></pre> View on Github </p> Armature Entries <p>src/main/java/yesman/epicfight/gameasset/Armatures.java<pre><code>    public static HumanoidArmature BIPED;\n    public static CreeperArmature CREEPER;\n    public static EndermanArmature ENDERMAN;\n    public static HumanoidArmature SKELETON;\n    public static SpiderArmature SPIDER;\n    public static IronGolemArmature IRON_GOLEM;\n    public static RavagerArmature RAVAGER;\n    public static VexArmature VEX;\n    public static PiglinArmature PIGLIN;\n    public static HoglinArmature HOGLIN;\n    public static DragonArmature DRAGON;\n    public static WitherArmature WITHER;\n</code></pre> View on Github </p> Animation Entries <p>src/main/java/yesman/epicfight/gameasset/Animations.java<pre><code>    public static StaticAnimation DUMMY_ANIMATION = new StaticAnimation();\n    public static StaticAnimation BIPED_IDLE;\n    public static StaticAnimation BIPED_WALK;\n    public static StaticAnimation BIPED_RUN;\n    public static StaticAnimation BIPED_SNEAK;\n    public static StaticAnimation BIPED_SWIM;\n    public static StaticAnimation BIPED_FLOAT;\n    public static StaticAnimation BIPED_KNEEL;\n    public static StaticAnimation BIPED_FALL;\n    public static StaticAnimation BIPED_FLYING;\n    public static StaticAnimation BIPED_CREATIVE_IDLE;\n    public static StaticAnimation BIPED_CREATIVE_FLYING;\n    public static StaticAnimation BIPED_CREATIVE_FLYING_FORWARD;\n    public static StaticAnimation BIPED_CREATIVE_FLYING_BACKWARD;\n    public static StaticAnimation BIPED_MOUNT;\n    public static StaticAnimation BIPED_SIT;\n    public static StaticAnimation BIPED_JUMP;\n    public static StaticAnimation BIPED_DEATH;\n    public static StaticAnimation BIPED_DIG_MAINHAND;\n    public static StaticAnimation BIPED_DIG_OFFHAND;\n    public static StaticAnimation BIPED_DIG;\n    public static StaticAnimation BIPED_RUN_SPEAR;\n    public static StaticAnimation BIPED_HOLD_GREATSWORD;\n    public static StaticAnimation BIPED_HOLD_UCHIGATANA_SHEATHING;\n    public static StaticAnimation BIPED_HOLD_UCHIGATANA;\n    public static StaticAnimation BIPED_HOLD_TACHI;\n    public static StaticAnimation BIPED_HOLD_LONGSWORD;\n    public static StaticAnimation BIPED_HOLD_LIECHTENAUER;\n    public static StaticAnimation BIPED_HOLD_SPEAR;\n    public static StaticAnimation BIPED_HOLD_DUAL_WEAPON;\n    public static StaticAnimation BIPED_HOLD_CROSSBOW;\n    public static StaticAnimation BIPED_HOLD_MAP_TWOHAND;\n    public static StaticAnimation BIPED_HOLD_MAP_OFFHAND;\n    public static StaticAnimation BIPED_HOLD_MAP_MAINHAND;\n    public static StaticAnimation BIPED_HOLD_MAP_TWOHAND_MOVE;\n    public static StaticAnimation BIPED_HOLD_MAP_OFFHAND_MOVE;\n    public static StaticAnimation BIPED_HOLD_MAP_MAINHAND_MOVE;\n    public static StaticAnimation BIPED_WALK_GREATSWORD;\n    public static StaticAnimation BIPED_WALK_SPEAR;\n    public static StaticAnimation BIPED_WALK_UCHIGATANA_SHEATHING;\n    public static StaticAnimation BIPED_WALK_UCHIGATANA;\n    public static StaticAnimation BIPED_WALK_TWOHAND;\n    public static StaticAnimation BIPED_WALK_LONGSWORD;\n    public static StaticAnimation BIPED_WALK_LIECHTENAUER;\n    public static StaticAnimation BIPED_RUN_GREATSWORD;\n    public static StaticAnimation BIPED_RUN_UCHIGATANA;\n    public static StaticAnimation BIPED_RUN_UCHIGATANA_SHEATHING;\n    public static StaticAnimation BIPED_RUN_DUAL;\n    public static StaticAnimation BIPED_RUN_LONGSWORD;\n    public static StaticAnimation BIPED_UCHIGATANA_SCRAP;\n    public static StaticAnimation BIPED_LIECHTENAUER_READY;\n    public static StaticAnimation BIPED_HIT_SHIELD;\n    public static StaticAnimation BIPED_CLIMBING;\n    public static StaticAnimation BIPED_SLEEPING;\n    public static StaticAnimation BIPED_BOW_AIM;\n    public static StaticAnimation BIPED_BOW_SHOT;\n    public static StaticAnimation BIPED_DRINK;\n    public static StaticAnimation BIPED_EAT;\n    public static StaticAnimation BIPED_SPYGLASS_USE;\n    public static StaticAnimation BIPED_CROSSBOW_AIM;\n    public static StaticAnimation BIPED_CROSSBOW_SHOT;\n    public static StaticAnimation BIPED_CROSSBOW_RELOAD;\n    public static StaticAnimation BIPED_JAVELIN_AIM;\n    public static StaticAnimation BIPED_JAVELIN_THROW;\n    public static StaticAnimation BIPED_HIT_SHORT;\n    public static StaticAnimation BIPED_HIT_LONG;\n    public static StaticAnimation BIPED_HIT_ON_MOUNT;\n    public static StaticAnimation BIPED_LANDING;\n    public static StaticAnimation BIPED_KNOCKDOWN;\n    public static StaticAnimation BIPED_BLOCK;\n    public static StaticAnimation BIPED_ROLL_FORWARD;\n    public static StaticAnimation BIPED_ROLL_BACKWARD;\n    public static StaticAnimation BIPED_STEP_FORWARD;\n    public static StaticAnimation BIPED_STEP_BACKWARD;\n    public static StaticAnimation BIPED_STEP_LEFT;\n    public static StaticAnimation BIPED_STEP_RIGHT;\n    public static StaticAnimation BIPED_KNOCKDOWN_WAKEUP_LEFT;\n    public static StaticAnimation BIPED_KNOCKDOWN_WAKEUP_RIGHT;\n    public static StaticAnimation BIPED_DEMOLITION_LEAP_CHARGING;\n    public static StaticAnimation BIPED_DEMOLITION_LEAP;\n    public static StaticAnimation BIPED_PHANTOM_ASCENT_FORWARD;\n    public static StaticAnimation BIPED_PHANTOM_ASCENT_BACKWARD;\n    public static StaticAnimation BIPED_MOB_ONEHAND1;\n    public static StaticAnimation BIPED_MOB_ONEHAND2;\n    public static StaticAnimation BIPED_MOB_GREATSWORD;\n    public static StaticAnimation BIPED_MOB_TACHI;\n    public static StaticAnimation BIPED_MOB_SPEAR_ONEHAND;\n    public static StaticAnimation BIPED_MOB_SPEAR_TWOHAND1;\n    public static StaticAnimation BIPED_MOB_SPEAR_TWOHAND2;\n    public static StaticAnimation BIPED_MOB_SPEAR_TWOHAND3;\n    public static StaticAnimation BIPED_MOB_SWORD_DUAL1;\n    public static StaticAnimation BIPED_MOB_SWORD_DUAL2;\n    public static StaticAnimation BIPED_MOB_SWORD_DUAL3;\n    public static StaticAnimation BIPED_MOB_LONGSWORD1;\n    public static StaticAnimation BIPED_MOB_LONGSWORD2;\n    public static StaticAnimation BIPED_MOB_UCHIGATANA1;\n    public static StaticAnimation BIPED_MOB_UCHIGATANA2;\n    public static StaticAnimation BIPED_MOB_UCHIGATANA3;\n    public static StaticAnimation BIPED_MOB_DAGGER_ONEHAND1;\n    public static StaticAnimation BIPED_MOB_DAGGER_ONEHAND2;\n    public static StaticAnimation BIPED_MOB_DAGGER_ONEHAND3;\n    public static StaticAnimation BIPED_MOB_DAGGER_TWOHAND1;\n    public static StaticAnimation BIPED_MOB_DAGGER_TWOHAND2;\n    public static StaticAnimation BIPED_MOB_THROW;\n    public static StaticAnimation CREEPER_IDLE;\n    public static StaticAnimation CREEPER_WALK;\n    public static StaticAnimation CREEPER_HIT_LONG;\n    public static StaticAnimation CREEPER_HIT_SHORT;\n    public static StaticAnimation CREEPER_DEATH;\n    public static StaticAnimation DRAGON_IDLE;\n    public static StaticAnimation DRAGON_WALK;\n    public static StaticAnimation DRAGON_WALK_PROCEDURAL;\n    public static StaticAnimation DRAGON_FLY;\n    public static StaticAnimation DRAGON_DEATH;\n    public static StaticAnimation DRAGON_GROUND_TO_FLY;\n    public static StaticAnimation DRAGON_FLY_TO_GROUND;\n    public static StaticAnimation DRAGON_ATTACK1;\n    public static StaticAnimation DRAGON_ATTACK2;\n    public static StaticAnimation DRAGON_ATTACK3;\n    public static StaticAnimation DRAGON_ATTACK4;\n    public static StaticAnimation DRAGON_ATTACK4_RECOVERY;\n    public static StaticAnimation DRAGON_FIREBALL;\n    public static StaticAnimation DRAGON_AIRSTRIKE;\n    public static StaticAnimation DRAGON_BACKJUMP_PREPARE;\n    public static StaticAnimation DRAGON_BACKJUMP_MOVE;\n    public static StaticAnimation DRAGON_BACKJUMP_RECOVERY;\n    public static StaticAnimation DRAGON_CRYSTAL_LINK;\n    public static StaticAnimation DRAGON_NEUTRALIZED;\n    public static StaticAnimation DRAGON_NEUTRALIZED_RECOVERY;\n    public static StaticAnimation ENDERMAN_IDLE;\n    public static StaticAnimation ENDERMAN_WALK;\n    public static StaticAnimation ENDERMAN_DEATH;\n    public static StaticAnimation ENDERMAN_HIT_SHORT;\n    public static StaticAnimation ENDERMAN_HIT_LONG;\n    public static StaticAnimation ENDERMAN_NEUTRALIZED;\n    public static StaticAnimation ENDERMAN_CONVERT_RAGE;\n    public static StaticAnimation ENDERMAN_RAGE_IDLE;\n    public static StaticAnimation ENDERMAN_RAGE_WALK;\n    public static StaticAnimation ENDERMAN_GRASP;\n    public static StaticAnimation ENDERMAN_TP_KICK1;\n    public static StaticAnimation ENDERMAN_TP_KICK2;\n    public static StaticAnimation ENDERMAN_KNEE;\n    public static StaticAnimation ENDERMAN_KICK1;\n    public static StaticAnimation ENDERMAN_KICK2;\n    public static StaticAnimation ENDERMAN_KICK_COMBO;\n    public static StaticAnimation ENDERMAN_TP_EMERGENCE;\n    public static StaticAnimation SPIDER_IDLE;\n    public static StaticAnimation SPIDER_CRAWL;\n    public static StaticAnimation SPIDER_DEATH;\n    public static StaticAnimation SPIDER_HIT;\n    public static StaticAnimation SPIDER_NEUTRALIZED;\n    public static StaticAnimation SPIDER_ATTACK;\n    public static StaticAnimation SPIDER_JUMP_ATTACK;\n    public static StaticAnimation GOLEM_IDLE;\n    public static StaticAnimation GOLEM_WALK;\n    public static StaticAnimation GOLEM_DEATH;\n    public static StaticAnimation GOLEM_ATTACK1;\n    public static StaticAnimation GOLEM_ATTACK2;\n    public static StaticAnimation GOLEM_ATTACK3;\n    public static StaticAnimation GOLEM_ATTACK4;\n    public static StaticAnimation HOGLIN_IDLE;\n    public static StaticAnimation HOGLIN_WALK;\n    public static StaticAnimation HOGLIN_DEATH;\n    public static StaticAnimation HOGLIN_ATTACK;\n    public static StaticAnimation ILLAGER_IDLE;\n    public static StaticAnimation ILLAGER_WALK;\n    public static StaticAnimation VINDICATOR_IDLE_AGGRESSIVE;\n    public static StaticAnimation VINDICATOR_CHASE;\n    public static StaticAnimation VINDICATOR_SWING_AXE1;\n    public static StaticAnimation VINDICATOR_SWING_AXE2;\n    public static StaticAnimation VINDICATOR_SWING_AXE3;\n    public static StaticAnimation EVOKER_CAST_SPELL;\n    public static StaticAnimation PIGLIN_IDLE;\n    public static StaticAnimation PIGLIN_WALK;\n    public static StaticAnimation PIGLIN_ZOMBIFIED_IDLE;\n    public static StaticAnimation PIGLIN_ZOMBIFIED_WALK;\n    public static StaticAnimation PIGLIN_ZOMBIFIED_CHASE;\n    public static StaticAnimation PIGLIN_CELEBRATE1;\n    public static StaticAnimation PIGLIN_CELEBRATE2;\n    public static StaticAnimation PIGLIN_CELEBRATE3;\n    public static StaticAnimation PIGLIN_ADMIRE;\n    public static StaticAnimation PIGLIN_DEATH;\n    public static StaticAnimation RAVAGER_IDLE;\n    public static StaticAnimation RAVAGER_WALK;\n    public static StaticAnimation RAVAGER_DEATH;\n    public static StaticAnimation RAVAGER_STUN;\n    public static StaticAnimation RAVAGER_ATTACK1;\n    public static StaticAnimation RAVAGER_ATTACK2;\n    public static StaticAnimation RAVAGER_ATTACK3;\n    public static StaticAnimation VEX_IDLE;\n    public static StaticAnimation VEX_FLIPPING;\n    public static StaticAnimation VEX_DEATH;\n    public static StaticAnimation VEX_HIT;\n    public static StaticAnimation VEX_CHARGE;\n    public static StaticAnimation VEX_NEUTRALIZED;\n    public static StaticAnimation WITCH_DRINKING;\n    public static StaticAnimation WITHER_SKELETON_IDLE;\n    public static StaticAnimation WITHER_SKELETON_SPECIAL_SPAWN;\n    public static StaticAnimation WITHER_SKELETON_WALK;\n    public static StaticAnimation WITHER_SKELETON_CHASE;\n    public static StaticAnimation WITHER_SKELETON_ATTACK1;\n    public static StaticAnimation WITHER_SKELETON_ATTACK2;\n    public static StaticAnimation WITHER_SKELETON_ATTACK3;\n    public static StaticAnimation WITHER_IDLE;\n    public static StaticAnimation WITHER_CHARGE;\n    public static StaticAnimation WITHER_DEATH;\n    public static StaticAnimation WITHER_NEUTRALIZED;\n    public static StaticAnimation WITHER_SPELL_ARMOR;\n    public static StaticAnimation WITHER_BLOCKED;\n    public static StaticAnimation WITHER_GHOST_STANDBY;\n    public static StaticAnimation WITHER_SWIRL;\n    public static StaticAnimation WITHER_BEAM;\n    public static StaticAnimation WITHER_BACKFLIP;\n    public static StaticAnimation ZOMBIE_IDLE;\n    public static StaticAnimation ZOMBIE_WALK;\n    public static StaticAnimation ZOMBIE_CHASE;\n    public static StaticAnimation ZOMBIE_ATTACK1;\n    public static StaticAnimation ZOMBIE_ATTACK2;\n    public static StaticAnimation ZOMBIE_ATTACK3;\n    public static StaticAnimation AXE_AUTO1;\n    public static StaticAnimation AXE_AUTO2;\n    public static StaticAnimation AXE_DASH;\n    public static StaticAnimation AXE_AIRSLASH;\n    public static StaticAnimation FIST_AUTO1;\n    public static StaticAnimation FIST_AUTO2;\n    public static StaticAnimation FIST_AUTO3;\n    public static StaticAnimation FIST_DASH;\n    public static StaticAnimation FIST_AIR_SLASH;\n    public static StaticAnimation SPEAR_ONEHAND_AUTO;\n    public static StaticAnimation SPEAR_BLOCK_AUTO;\n    public static StaticAnimation SPEAR_ONEHAND_AIR_SLASH;\n    public static StaticAnimation SPEAR_TWOHAND_AUTO1;\n    public static StaticAnimation SPEAR_TWOHAND_AUTO2;\n    public static StaticAnimation SPEAR_TWOHAND_AIR_SLASH;\n    public static StaticAnimation SPEAR_DASH;\n    public static StaticAnimation SPEAR_MOUNT_ATTACK;\n    public static StaticAnimation SPEAR_GUARD;\n    public static StaticAnimation SPEAR_GUARD_HIT;\n    public static StaticAnimation SWORD_AUTO1;\n    public static StaticAnimation SWORD_AUTO2;\n    public static StaticAnimation SWORD_AUTO3;\n    public static StaticAnimation SWORD_DASH;\n    public static StaticAnimation SWORD_AIR_SLASH;\n    public static StaticAnimation SWORD_GUARD;\n    public static StaticAnimation SWORD_GUARD_HIT;\n    public static StaticAnimation SWORD_GUARD_ACTIVE_HIT1;\n    public static StaticAnimation SWORD_GUARD_ACTIVE_HIT2;\n    public static StaticAnimation SWORD_GUARD_ACTIVE_HIT3;\n    public static StaticAnimation LONGSWORD_GUARD_ACTIVE_HIT1;\n    public static StaticAnimation LONGSWORD_GUARD_ACTIVE_HIT2;\n    public static StaticAnimation SWORD_DUAL_AUTO1;\n    public static StaticAnimation SWORD_DUAL_AUTO2;\n    public static StaticAnimation SWORD_DUAL_AUTO3;\n    public static StaticAnimation SWORD_DUAL_DASH;\n    public static StaticAnimation SWORD_DUAL_AIR_SLASH;\n    public static StaticAnimation SWORD_DUAL_GUARD;\n    public static StaticAnimation SWORD_DUAL_GUARD_HIT;\n    public static StaticAnimation BIPED_COMMON_NEUTRALIZED;\n    public static StaticAnimation GREATSWORD_GUARD_BREAK;\n    public static StaticAnimation METEOR_SLAM;\n    public static StaticAnimation REVELATION_ONEHAND;\n    public static StaticAnimation REVELATION_TWOHAND;\n    public static StaticAnimation LONGSWORD_AUTO1;\n    public static StaticAnimation LONGSWORD_AUTO2;\n    public static StaticAnimation LONGSWORD_AUTO3;\n    public static StaticAnimation LONGSWORD_DASH;\n    public static StaticAnimation LONGSWORD_LIECHTENAUER_AUTO1;\n    public static StaticAnimation LONGSWORD_LIECHTENAUER_AUTO2;\n    public static StaticAnimation LONGSWORD_LIECHTENAUER_AUTO3;\n    public static StaticAnimation LONGSWORD_AIR_SLASH;\n    public static StaticAnimation LONGSWORD_GUARD;\n    public static StaticAnimation LONGSWORD_GUARD_HIT;\n    public static StaticAnimation TACHI_AUTO1;\n    public static StaticAnimation TACHI_AUTO2;\n    public static StaticAnimation TACHI_AUTO3;\n    public static StaticAnimation TACHI_DASH;\n    public static StaticAnimation TOOL_AUTO1;\n    public static StaticAnimation TOOL_AUTO2;\n    public static StaticAnimation TOOL_DASH;\n    public static StaticAnimation UCHIGATANA_AUTO1;\n    public static StaticAnimation UCHIGATANA_AUTO2;\n    public static StaticAnimation UCHIGATANA_AUTO3;\n    public static StaticAnimation UCHIGATANA_DASH;\n    public static StaticAnimation UCHIGATANA_AIR_SLASH;\n    public static StaticAnimation UCHIGATANA_SHEATHING_AUTO;\n    public static StaticAnimation UCHIGATANA_SHEATHING_DASH;\n    public static StaticAnimation UCHIGATANA_SHEATH_AIR_SLASH;\n    public static StaticAnimation UCHIGATANA_GUARD;\n    public static StaticAnimation UCHIGATANA_GUARD_HIT;\n    public static StaticAnimation SWORD_MOUNT_ATTACK;\n    public static StaticAnimation GREATSWORD_AUTO1;\n    public static StaticAnimation GREATSWORD_AUTO2;\n    public static StaticAnimation GREATSWORD_DASH;\n    public static StaticAnimation GREATSWORD_AIR_SLASH;\n    public static StaticAnimation GREATSWORD_GUARD;\n    public static StaticAnimation GREATSWORD_GUARD_HIT;\n    public static StaticAnimation DAGGER_AUTO1;\n    public static StaticAnimation DAGGER_AUTO2;\n    public static StaticAnimation DAGGER_AUTO3;\n    public static StaticAnimation DAGGER_DASH;\n    public static StaticAnimation DAGGER_AIR_SLASH;\n    public static StaticAnimation DAGGER_DUAL_AUTO1;\n    public static StaticAnimation DAGGER_DUAL_AUTO2;\n    public static StaticAnimation DAGGER_DUAL_AUTO3;\n    public static StaticAnimation DAGGER_DUAL_AUTO4;\n    public static StaticAnimation DAGGER_DUAL_DASH;\n    public static StaticAnimation DAGGER_DUAL_AIR_SLASH;\n    public static StaticAnimation TRIDENT_AUTO1;\n    public static StaticAnimation TRIDENT_AUTO2;\n    public static StaticAnimation TRIDENT_AUTO3;\n    public static StaticAnimation THE_GUILLOTINE;\n    public static StaticAnimation SWEEPING_EDGE;\n    public static StaticAnimation DANCING_EDGE;\n    public static StaticAnimation HEARTPIERCER;\n    public static StaticAnimation GRASPING_SPIRAL_FIRST;\n    public static StaticAnimation GRASPING_SPIRAL_SECOND;\n    public static StaticAnimation STEEL_WHIRLWIND_CHARGING;\n    public static StaticAnimation STEEL_WHIRLWIND;\n    public static StaticAnimation BATTOJUTSU;\n    public static StaticAnimation BATTOJUTSU_DASH;\n    public static StaticAnimation RUSHING_TEMPO1;\n    public static StaticAnimation RUSHING_TEMPO2;\n    public static StaticAnimation RUSHING_TEMPO3;\n    public static StaticAnimation RELENTLESS_COMBO;\n    public static StaticAnimation EVISCERATE_FIRST;\n    public static StaticAnimation EVISCERATE_SECOND;\n    public static StaticAnimation BLADE_RUSH_COMBO1;\n    public static StaticAnimation BLADE_RUSH_COMBO2;\n    public static StaticAnimation BLADE_RUSH_COMBO3;\n    public static StaticAnimation BLADE_RUSH_HIT;\n    public static StaticAnimation BLADE_RUSH_EXECUTE_BIPED;\n    public static StaticAnimation BLADE_RUSH_TRY;\n    public static StaticAnimation BLADE_RUSH_FAILED;\n    public static StaticAnimation WRATHFUL_LIGHTING;\n    public static StaticAnimation TSUNAMI;\n    public static StaticAnimation TSUNAMI_REINFORCED;\n    public static StaticAnimation EVERLASTING_ALLEGIANCE_CALL;\n    public static StaticAnimation EVERLASTING_ALLEGIANCE_CATCH;\n    public static StaticAnimation SHARP_STAB;\n    public static StaticAnimation OFF_ANIMATION_HIGHEST;\n    public static StaticAnimation OFF_ANIMATION_MIDDLE;\n</code></pre> View on Github </p>"},{"location":"Guides/Entities/page1/#easy-setup-","title":"Easy Setup -","text":""},{"location":"Guides/Entities/page1/#using-presets","title":"Using presets","text":"<p>For entities that extend the vanilla classes/or simmilar models to the ones in vanilla you can use presets as a simple setup method. <pre><code>{\n    \"preset\": \"minecraft:creeper\"\n}\n</code></pre></p> <p>You should know that this will not work properly if the targeted entity doesn't share its code with the vanilla entity (if the entity class doesn't extend the vanilla class), although it is seemingly the same. The allowed values are all the entity's registry names that are registered in the code</p>"},{"location":"Guides/Entities/page1/#disabling-an-epicfied-entity","title":"Disabling an \"epicfied\" entity","text":"<p>You also can disable entity animations and custom models by using the following line (inside of entityname.json):  <code>.zip</code> <pre><code>{\n    \"disabled\": true\n}\n</code></pre></p>"},{"location":"Guides/Entities/page1/#entity-animation-features-","title":"Entity animation features -","text":"<p>In epic fight you are able to change entity ai's and behaviour through datapacks. You can customize which animations should be played according to certain behaviors.</p> <p>Below is a simple example of how you can create a punching zombie. <code>.zip</code> <pre><code>{\n    \"model\": \"epicfight:entity/biped_old_texture\",\n    \"armature\": \"epicfight:entity/biped\",\n    \"renderer\": \"minecraft:zombie\",\n    \"isHumanoid\": false,\n    \"faction\": \"neutral\",\n    \"attributes\": {\n        \"impact\": 0.5,\n        \"armor_negation\": 0.0,\n        \"max_strikes\": 1,\n        \"chasing_speed\": 1.0,\n                \"scale\": 1.0\n    },\n    \"default_livingmotions\": {\n        \"idle\": \"epicfight:biped/living/idle\",\n        \"walk\": \"epicfight:biped/living/walk\",\n        \"chase\": \"epicfight:biped/living/walk\",\n        \"mount\": \"epicfight:biped/living/mount\",\n                \"fall\": \"epicfight:biped/living/fall\",\n        \"death\": \"epicfight:biped/living/death\"\n    },\n    \"stun_animations\": {\n        \"short\": \"epicfight:biped/combat/hit_short\",\n        \"long\": \"epicfight:biped/combat/hit_long\",\n        \"knockdown\": \"epicfight:biped/combat/knockdown\",\n        \"fall\": \"epicfight:biped/living/landing\"\n    },\n    \"combat_behavior\": [\n        {\n            \"weight\": 100.0,\n            \"canBeInterrupted\": true,\n            \"looping\": false,\n            \"behaviors\": [\n                {\n                    \"conditions\": [\n                        {\"predicate\":\"within_eye_height\"}, {\"predicate\":\"within_distance\", \"min\": 0.0, \"max\": 2.0}\n                    ],\n                    \"animation\": \"epicfight:zombie/attack1\"\n                },\n                {\n                    \"conditions\": [\n                        {\"predicate\":\"within_eye_height\"}, {\"predicate\":\"within_distance\", \"min\": 0.0, \"max\": 2.0}\n                    ],\n                    \"animation\": \"epicfight:zombie/attack2\"\n                },\n                {\n                    \"conditions\": [\n                        {\"predicate\":\"within_eye_height\"}, {\"predicate\":\"within_distance\", \"min\": 0.0, \"max\": 2.0}\n                    ],\n                    \"animation\": \"epicfight:zombie/attack3\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre></p> <p><code>model</code>: The model of the entity. Allowed values are here</p> <p><code>armature</code>: Defines the skeletal structure (armature) that the entity utilizes. For a complete list of allowed values, refer here</p> <p><code>renderer</code>: All the entity's registry names that are registered in our source code can be obtained here</p> <p><code>isHumanoid</code>: Specifies if the entity is humanoid. Humanoids adjust animations based on the item they hold.</p> <p><code>faction</code>: Entities in the same faction won't attack each other. Allowed values: <code>enderman</code>, <code>piglins</code>, <code>wither</code>, <code>neutral</code>, <code>undead</code>, <code>illager</code>, <code>villager</code></p> <code>attributes</code>:   Key Feature impact Extends the stun time of attack target armor_negation Bypasses defense points by % max_strikes Determines how many entities can hit per one swing chasing_speed For melee attack mobs, determines how fast the mob chases the enemy scale Determines the size of the entity <code>default_livingmotions</code>:   Key Feature idle When the entity stays still walk When the entity moves chase When the entity moves and has a target fall When the entity falls because of gravity death When the entity dies mount When the entity is riding <code>stun_animations</code>:   Key Feature short Every normal attack long For some special attacks knockdown Ender dragon's ground slam fall Fall damage <code>combat_behavior</code>: attack moves of the entity.   Key Feature weight The possibility of this behavior is selected. It will be calculated as <code>(weight/total weight sum)</code> canBeInterrupted Determines if this movement series can be canceled looping Determines whether the current behavior should be saved when canceled cooldown Determines how many \"ticks\" it'll take to be used again behaviors Definition of the conditions and attack animation <p> <code>behaviors</code>: Key Feature conditions Conditions that have to be met to be selected animation The animation path <p><code>conditions</code>:</p> Key Feature Arguments random_chance Checks if the random value is higher than the given argument \"chance\": double within_eye_height Checks if the Y distance between target and attacker is smaller than the attacker's eye height - within_distance Checks the distance between target and attacker, if they are within the given arguments \"min\": double, \"max\": double within_angle Checks if the angle towards the target is within the given argument. \"min\": double, \"max\": double within_angle_horizontal Checks if the Y-axis angle towards the target is within the given argument. \"min\": double, \"max\": double health Checks the entity's health. \"health\": double, \"comparator\": <code>enum:(greater_absolute, less_absolute, greater_ratio, less_ratio)</code> <p></p>"},{"location":"Guides/Entities/page1/#changing-the-animation-based-on-the-weapon-its-holding-","title":"Changing the animation based on the weapon its holding -","text":"<p>For the humanoid mobs, you can set different animation sets depending on the weapon they're holding. In this case, the format of the \"combat_behaviors\" is slightly changed. First, you have to check if you set the \"isHumanoid\" value to true.</p> <p>Below is an example of how you can create a zombie, that wields a sword like a wither skeleton while idle and walking, attacking with a sword, or punching with empty hands. <pre><code>{\n    \"model\": \"epicfight:entity/biped_old_texture\",\n    \"armature\": \"epicfight:entity/biped\",\n    \"renderer\": \"minecraft:zombie\",\n    \"isHumanoid\": true,\n    \"faction\": \"neutral\",\n    \"attributes\": {\n        \"impact\": 0.5,\n        \"armor_negation\": 0.0,\n        \"max_strikes\": 1,\n        \"chasing_speed\": 1.0,\n                \"scale\": 1.0\n    },\n    \"default_livingmotions\": {\n        \"idle\": \"epicfight:biped/living/idle\",\n        \"walk\": \"epicfight:biped/living/walk\",\n        \"chase\": \"epicfight:biped/living/walk\",\n        \"mount\": \"epicfight:biped/living/mount\",\n                \"fall\": \"epicfight:biped/living/fall\",\n        \"death\": \"epicfight:biped/living/death\"\n    },\n    \"humanoid_weapon_motions\": [\n        {\n            \"weapon_categories\": [\"sword\"],\n            \"style\":\"one_hand\",\n            \"livingmotions\": {\n                \"walk\": \"epicfight:wither_skeleton/walk\",\n                \"chase\": \"epicfight:wither_skeleton/chase\"\n            }\n        }\n    ],\n    \"stun_animations\": {\n        \"short\": \"epicfight:biped/combat/hit_short\",\n        \"long\": \"epicfight:biped/combat/hit_long\",\n        \"knockdown\": \"epicfight:biped/combat/knockdown\",\n        \"fall\": \"epicfight:biped/living/landing\"\n    },\n    \"combat_behavior\": [\n        {\n            \"weapon_categories\": [\"axe\", \"hoe\", \"pickaxe\", \"shovel\", \"sword\"],\n            \"style\": \"one_hand\",\n            \"behavior_series\": [\n                {\n                    \"weight\": 100.0,\n                    \"canBeInterrupted\": true,\n                    \"looping\": true,\n                    \"behaviors\": [\n                        {\n                            \"conditions\": [\n                                {\"predicate\":\"within_eye_height\"}, {\"predicate\":\"within_distance\", \"min\": 0.0, \"max\": 2.2}\n                            ],\n                            \"animation\": \"epicfight:biped/combat/mob_onehand1\"\n                        },\n                        {\n                            \"conditions\": [\n                                {\"predicate\":\"within_eye_height\"}, {\"predicate\":\"within_distance\", \"min\": 0.0, \"max\": 2.2}\n                            ],\n                            \"animation\": \"epicfight:biped/combat/mob_onehand2\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"weapon_categories\": [\"fist\"],\n            \"style\": \"common\",\n            \"behavior_series\": [\n                {\n                    \"weight\": 100.0,\n                    \"canBeInterrupted\": true,\n                    \"looping\": false,\n                    \"behaviors\": [\n                        {\n                            \"conditions\": [\n                                {\"predicate\":\"within_eye_height\"}, {\"predicate\":\"within_distance\", \"min\": 0.0, \"max\": 2.0}\n                            ],\n                            \"animation\": \"epicfight:zombie/attack1\"\n                        },\n                        {\n                            \"conditions\": [\n                                {\"predicate\":\"within_eye_height\"}, {\"predicate\":\"within_distance\", \"min\": 0.0, \"max\": 2.0}\n                            ],\n                            \"animation\": \"epicfight:zombie/attack2\"\n                        },\n                        {\n                            \"conditions\": [\n                                {\"predicate\":\"within_eye_height\"}, {\"predicate\":\"within_distance\", \"min\": 0.0, \"max\": 2.0}\n                            ],\n                            \"animation\": \"epicfight:zombie/attack3\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n</code></pre></p> <p><code>humanoid_weapon_motions</code>: A list of the modified living motions for each weapon category.</p> <p><code>weapon_categories</code>: Which weapons should have the same behavior series. Allowed values are:</p> <pre><code>       AXE, FIST, GREATSWORD, HOE, PICKAXE, SHOVEL, SWORD, UCHIGATANA, SPEAR, TACHI, TRIDENT, LONGSWORD, DAGGER, SHIELD, RANGED\n</code></pre> <p><code>style</code>: Holding style. Allowed values are: <code>one_hand, two_hand, common</code>.</p>"},{"location":"Guides/Entities/page2/","title":"Mob Capabilities Editor","text":"<ul> <li> <p>Mob Capabilities Editor Tutorial</p> <p></p> </li> </ul>"},{"location":"Guides/Entities/page2/#getting-started","title":"Getting started","text":"<p>Start by launching your game with Epic Fight installed. From the main menu, click on the 'Mods' button and search for 'Epic Fight.' Once you find it, select it and click on 'Config.' This will open the editor window, allowing you to make your desired changes.</p> <p>Select your entity:</p> <p>There are two ways to patch an entity. The simpler option is to select from a list of presets, featuring entities that Epic Fight has already redesigned from the vanilla game. Alternatively, you can take a more detailed approach, fully customizing the entity to suit your vision.</p>"},{"location":"Guides/Entities/page2/#easy-setup","title":"Easy Setup","text":"<p>Similar to the Custom Entities Datapack's Easy Setup, the mob capability options provide a variety of presets for players to choose from. To view the available presets, click on the drop-down menu to the right of the 'Presets' option.</p> <p> </p> <p>You can also disable already patched entities provided by Epic Fight. For example, you may choose to disable certain vanilla entities, such as the Zombie, Skeleton, or Enderman.</p>"},{"location":"Guides/Entities/page2/#detailed-setup","title":"Detailed Setup","text":""},{"location":"Guides/Entities/page2/#setting-up-the-basics","title":"Setting up the basics","text":"To create a custom entity, it's essential to understand the three foundational components that bring it to life: the Model, the Armature, and the Renderer.   <ol> <li> Model: This serves as the blueprint for the entity's geometry, defining its physical structure and appearance. Think of it as the body of the mob &amp; how it looks in terms of shape, size, and design. </li> <li> Armature: Often referred to as the skeleton of the entity, the armature is responsible for enabling movement and animations. It acts as the framework that connects different parts of the model, allowing it to bend, stretch, or perform complex motions seamlessly. </li> <li> Renderer: The renderer determines how the entity is displayed within the game environment. It handles textures, colors, lighting, and other visual elements, ensuring the entity appears and behaves cohesively with the game's aesthetic. </li> </ol> <p>Each pillar plays a vital role, and together, they form the complete structure of a custom entity. Mastery of these elements allows for the creation of unique and engaging entities that enhance the gameplay experience.</p>"},{"location":"Guides/Entities/page2/#unlocking-features-and-functionality","title":"Unlocking Features and Functionality","text":"<p>When creating or customizing entities in your project, you can assign various properties to them. These properties act as customizable traits that enable unique behaviors and features for your entities, bringing you closer to achieving your desired functionality. Below, we explore some key properties and their impact on entity behavior:  </p> <ul> <li>         The Humanoid property group defines whether an entity can utilize tools or other held items. Enabling this property adds a new layer of interactivity by:             <ul> <li>Allowing the entity to use tools and weapons, such as swords, pickaxes, or bows.</li> <li>Changing the entity's attack and living animations based on the item it is holding. For example, a humanoid entity with a sword will use a different attack animation compared to one holding nothing or a bow.</li> </ul> </li> <li>         The Factions property determines the alliances and relationships between entities in the world. It sets up dynamic interactions, as described below:               <ul> <li>Entities belonging to the same faction will not attack or harm each other by default.</li> <li>Factions act as a group identifier for mobs, enabling cooperative behavior among allied entities.</li> <li>However, faction members can still attack each other if explicitly directed by their AI or other in-game events (e.g., provocation or player intervention).</li> </ul> </li> </ul> <p>Warning</p> <p>Applying the \"Humanoid\" property to non-bipedal entities may lead to animation or behavior inconsistencies, so it\u2019s recommended to use it primarily for entities with a humanoid form.</p>"},{"location":"Guides/Entities/page2/#sounds-and-particles","title":"Sounds and Particles","text":"<p>To further enhance your entities, you can customize their behavior with specific sound and particle effects. These options allow for more immersive and dynamic interactions, tailoring your mobs to fit your gameplay environment. Below are the additional customization options explained in detail:</p> <ul> <li>         The Swing Sound is the audio effect played when the entity performs an attack. This sound adds an auditory cue to the entity's actions, making combat interactions more engaging.             <ul> <li>For humanoid entities, the swing sound associated with the type of weapon they are holding takes precedence over the entity\u2019s default swing sound.</li> </ul> </li> <li>         The Hit Sound is the sound effect that plays when the entity successfully damages another entity. It provides feedback for successful attacks and enhances the sensory experience during combat.               <ul> <li>Particles can be tailored to match the entity\u2019s theme or attack style. For example, a fiery mob could produce flame particles, while a magical entity might create sparkles or glowing dust.</li> </ul> </li> </ul>"},{"location":"Guides/Entities/page2/#defining-mob-attributes","title":"Defining Mob Attributes","text":"<p>Attributes define the core capabilities of your mobs, influencing their combat effectiveness, movement, and physical characteristics. Here's a breakdown of key attributes and their effects:</p> Attribute Info Impact Increases the stun duration applied to enemies when the mob successfully lands an attack. Ideal for mobs designed to interrupt or incapacitate opponents, giving them a tactical edge in combat scenarios. Armor Negation Enhances the mob's ability to deal damage to heavily armored entities by reducing the effectiveness of their defense points. Great to counter tanks or heavily fortified foes, ensuring they remain a threat regardless of enemy armor. Max Strikes Determines the maximum number of entities that can be struck in a single attack or swing. A mob with a high Max Strikes value can hit multiple targets at once, making it effective in crowd-control scenarios. Chasing Speed Increases the mob's movement speed while actively pursuing a target. Enables fast-paced or predatory mobs to chase down their prey effectively. Scale Adjusts the size of the mob, affecting both its visual model and physical armature (hitbox, animations, etc). Use for mobs that share a model but need a size distinction, such as making a Giant Zombie from a regular zombie model.  Stun Armor Reduces the mob's susceptibility to stuns, making it more resilient in battle. Ideal for boss mobs or heavily armored creatures, ensuring they remain active and dangerous even against stun-heavy opponents."},{"location":"Guides/Entities/page2/#animating-your-mobs-lifecycle","title":"Animating Your Mob\u2019s Lifecycle","text":"<p>Living animations bring life to your mobs by defining how they move, react, and behave throughout their lifecycle. These animations are tied to specific states and events, allowing mobs to respond dynamically to various situations</p> <p>Entities typically have three main states during their lifecycle:</p> <ul> <li>         Idle         <ul> <li>Represents the mob when it's stationary and not interacting with its surroundings.</li> </ul> </li> <li>         Walk         <ul> <li>Represents normal movement when the mob is wandering or navigating the environment without a target.</li> </ul> </li> <li>         Chase         <ul> <li>Represents the mob when pursuing a target aggressively.</li> </ul> </li> </ul> <p></p> <p>You may also define stun animations, these bring a realistic and dynamic response to your mobs when they are temporarily incapacitated by external effects. These animations are tied to specific stun types and are crucial for ensuring the mob reacts appropriately during gameplay.</p> <p>Each stun type can have its own unique animation, such as:</p> <ul> <li>Quickly freezing in place when stunned by any any damage (Short).</li> <li>A mob staggering backward when hit by a heavy attack (long).</li> <li>Collapsing briefly when knocked down (Knockdown).</li> <li>Landing after receiving fall damage (Fall).</li> </ul> <p>Warning</p> <p>If no animation is bound for a specific stun type, the mob will be immune to that stun. This behavior allows you to control which stuns affect your mob, creating opportunities for specialized resistances or vulnerabilities.</p>"},{"location":"Guides/Entities/page2/#combat-behavior","title":"Combat Behavior","text":"<p>Once you've set up your entity's basic properties and animations, it's time to focus on its combat behavior, which determines how the entity fights, attacks, and selects its moves in various scenarios. In Epic Fight, combat behavior is driven by AI system that utilizes moveset layers and conditions to create dynamic encounters.</p>"},{"location":"Guides/Entities/page2/#understanding-combat-ai-and-moveset-layers","title":"Understanding Combat AI and Moveset Layers","text":"<p>Combat AI uses layers of movesets, where each moveset consists of a set of attack animations &amp; specific conditions for when those animations should be used.  Each moveset has a weight value, which determines its likelihood of being selected by the AI. Adjusting the weights allows you to bias the AI toward specific attack styles or prioritize certain moves.  Before selecting a moveset, the AI checks the first condition of each moveset. Movesets that fail this condition are excluded from being candidates.</p> <p>Example</p> <p>A \"jump attack\" moveset might require the target to be within a specific distance or the mob to be airborne.</p> <p> Once a moveset is selected:  </p> <ol> <li> <p>Marking Behaviors    - The AI marks the first behavior in the moveset. This serves as the starting point for the entity\u2019s attack.    - It then attempts to proceed to the next behavior in the sequence, provided the next behavior\u2019s conditions are met.  </p> </li> <li> <p>Interceptable Movesets    - If the current moveset is interceptable, the AI can evaluate other potential movesets during the sequence.    - This creates opportunities for the AI to adapt dynamically during combat.  </p> </li> <li> <p>Resetting on Failure    - If the AI fails to meet the conditions for the next behavior in the sequence, it resets to the first behavior unless the current moveset is set to loop.    - Looping Movesets: These repeat their behaviors until a condition is met or interrupted.</p> </li> </ol> <p> Combat Cycle:</p> <ul> <li>The AI continuously repeats this process if the mob has a valid target.</li> </ul>"},{"location":"Guides/Weapons/page1/","title":"Item Capability","text":"<ul> <li> <p>Item Capabilities Tutorial</p> <p></p> </li> </ul> <p> <p> Version Value 1.16.5 6 1.17.x 7 1.18.2 8 1.19.2 9 1.20.1 15 <p></p>"},{"location":"Guides/Weapons/page1/#making-the-packmcmeta-file","title":"Making the pack.mcmeta file","text":"<p>First, you'll need to create a pack.mcmeta file. Here's how to do it:</p> <ol> <li> <p>Create the File:    - Start by creating a new text file.    - Rename the file to <code>pack.mcmeta</code>. Ensure that file extensions are visible so you can properly change the extension (e.g., from <code>.txt</code> to <code>.mcmeta</code>).  </p> </li> <li> <p>Edit the File:    - Open the file with a text editor and add the following code for your datapack to function properly:  </p> </li> </ol> <pre><code>{\n    \"pack\":{\n        \"pack_format\":15,\n        \"description\":\"A short description on your pack\"\n        }\n}\n</code></pre>"},{"location":"Guides/Weapons/page1/#pack_format-values","title":"pack_format Values","text":""},{"location":"Guides/Weapons/page1/#making-the-folder-path","title":"Making the folder path","text":"<p>To set up the folder structure, follow these steps. Each folder or file must be nested inside the previous one in the hierarchy:  <code>data  \"modid\"  capabilities  \"type\"  \"registryname\".JSON</code> </p> <ul> <li> <p><code>modid</code>: The mod ID is usually the name of the mod. You can often find it by checking in-game item tooltips (press <code>F3 + H</code> to enable Advanced Tooltips) or by looking at commands or messages related to the mod. For example, if the tooltip for an item shows <code>modid:itemname</code>, the part before the colon <code>(modid)</code> is what you\u2019ll use to name the <code>\"modid\"</code> folder.</p> </li> <li> <p><code>type</code>: This refers to the category of the item you\u2019re configuring. Use either <code>weapons</code> or <code>armors</code>.</p> </li> <li> <p><code>registrynames</code>: To locate an item\u2019s registry name, press <code>F3 + H</code> in-game to enable Advanced Tooltips. Then, hover over the item to view its registry name.</p> </li> </ul> Make a <code>.txt</code> file with the outlined text, then change it's type to <code>.json</code>"},{"location":"Guides/Weapons/page1/#handling-special-cases","title":"Handling Special Cases","text":"<p>If the weapon's registry name includes unexpected characters like slashes (/), such as in: <code>\"bloodandmadness:weapons/hunter_axe\"</code></p> <p>You can represent the slashes in the folder structure by splitting the name into separate folders. For instance, the example above would translate into the following hierarchy: <code>data  bloodandmadness  capabilities  weapons  hunter_axe.JSON</code> This approach ensures that each part of the path is accurately reflected in the folder structure. </p>"},{"location":"Guides/Weapons/page1/#creating-the-json-file","title":"Creating the JSON file","text":"<p><code>.zip</code></p> <p> <p><code>type</code>: Which animations it should use. Available Type Values:</p> Type Style Info axe One-Handed fist Dual Wielding hoe One-Handed pickaxe One-Handed shovel One-Handed sword Dual Wielding spear One/Two-Handed greatsword Two-Handed uchigatana Two-Handed tachi Two-Handed longsword Two-Handed dagger Dual Wielding bow Two-Handed crossbow Two-Handed trident One-Handed shield Dual Wielding <p></p> <p>One-Handed: Can only be used if held in the main hand.</p> <p>Two-Handed: Usable only when held in the main hand, disabling any offhand functionality.</p> <p>Dual Wielding: Usable in the offhand when a weapon of the same type is equipped in the main hand.</p> <p>Tip</p> <p>If you want to use weapon types from other mods, such as Weapons of Miracle, ensure you update the Mod ID before the weapon type. For example, use <code>\"coolmodid:rapier\"</code> instead of <code>\"epicfight:rapier\"</code>.</p> <p><code>attributes</code>: Determines whether the weapon's stats change when an item is held in the offhand.</p> <ul> <li> <p><code>common</code>: Indicates that the weapon maintains the same stats regardless of whether something is held in the offhand or if the weapon type is restricted to two-handed use.</p> </li> <li> <p><code>one_hand/two_hand</code>: Allows the weapon to have different stats depending on whether the offhand is empty, provided the weapon type does not enforce a two-handed style.</p> </li> </ul>"},{"location":"Guides/Weapons/page1/#weapon-config","title":"Weapon Config","text":"Here's a simple example of a sword config: <pre><code> {\n    \"type\": \"epicfight:sword\",\n    \"attributes\": {\n        \"common\": {\n            \"armor_negation\": 0.0,\n                \"impact\": 1.1,\n            \"max_strikes\": 1\n        }\n    }\n }\n</code></pre>"},{"location":"Guides/Weapons/page1/#onetwo-handed-weapon-file","title":"One/Two-Handed","text":"Here's an example of a spear config with both one-handed and two-handed attributes: <pre><code> {\n    \"type\": \"epicfight:spear\",\n    \"attributes\": {\n        \"one_hand\": {\n            \"armor_negation\": 8.0,\n                \"impact\": 1.9,\n            \"max_strikes\": 1\n        },\n        \"two_hand\": {\n            \"armor_negation\": 0.0,\n                \"impact\": 1.3,\n            \"max_strikes\": 3\n        }\n    }\n }\n</code></pre>"},{"location":"Guides/Weapons/page1/#attribute-modifiers-overview","title":"Attribute Modifiers Overview","text":"The next few attribute values are added to their base values. <p><code>armor_negation</code>: Determines the percentage of damage unaffected by defense points. (base value: 0.0)</p> <p><code>impact</code>: Increases the stun duration applied to the hit target. (base value: 0.5)</p> <p><code>max_strikes</code>: Specifies the maximum number of enemies that can be hit in a single swing.  (base value: 1.0)</p> <p><code>damage_bonus</code>: Increases the weapon's damage output. (base value: 0.0)</p> <p><code>speed_bonus</code>: Enhances the weapon's attack speed. (base value: 0.0)</p>"},{"location":"Guides/Weapons/page1/#resizing-collider","title":"Resizing collider","text":"<p>Adjust the collider size to ensure it aligns visually with the weapon.</p> <p>Here's a simple example of an armor config:</p> <pre><code> {\n    \"attributes\":\n    {\n        ...\n    },\n    \"collider\":\n    {\n        \"number\": 3,\n        \"center\": [0.0, 0.0, -1.0],\n        \"size\": [0.5, 0.8, 1.0]\n    }\n }\n</code></pre> <p><code>number</code>: Defines the number of colliders interpolating between the previous pose and the current one. Higher values improve collision detection accuracy but increase computational overhead.</p> <p><code>center</code>: Specifies the central position of the collider.</p> <p><code>size</code>: Sets the x, y, and z dimensions of the collider.</p> <p>Estimating the collider size purely through numerical values can be challenging. To save time, use presets as a reference. Copy the preset values and adjust the size incrementally for fine-tuning.  Collider Presets</p>"},{"location":"Guides/Weapons/page1/#armor-file","title":"Armor file","text":"<p>Here's a simple example of an armor config:</p> <pre><code> {\n    \"attributes\": {\n        \"stun_armor\":1.5,\n        \"weight\":8.2\n    }\n }\n</code></pre> <p><code>stun_armor</code>: Increases the time between stuns.</p> <p><code>weight</code>: Reduces the stun duration when hit, but also increases stamina consumption for skills and decreases attack speed. Items with higher attack speed will experience a more significant effect.</p>"},{"location":"Guides/Weapons/page1/#finishing-up-the-datapack","title":"Finishing up the Datapack","text":"<p>What you should have now is:</p> <ul> <li>The data folder that contains all the JSON files and other folders like capabilities.</li> <li>The pack.mcmeta file.</li> </ul>"},{"location":"Guides/Weapons/page1/#preparing-the-datapack-for-sharing","title":"Preparing the Datapack for Sharing","text":"<p>To prepare the datapack for sharing, follow these steps to zip it using 7-Zip:</p> <ol> <li>Place the data folder and the pack.mcmeta file in a new folder. Preferably name the folder \"datapack\"</li> <li>Select both the <code>data</code> folder and the <code>pack.mcmeta</code> file.</li> <li>Right-click the folder and select 7-Zip &gt; Add to archive.</li> <li>Finally, select Add to <code>\"datapack.zip\"</code> (make sure the <code>.zip</code> file format is selected)</li> </ol> <p></p> <p>Then right-click, go under 7-Zip, and click on <code>add to \"datapack.zip\"</code>.</p> <p>To enable your datapack, follow these steps:</p> <ol> <li> <p>Place the Datapack in the World Folder:    - Navigate to your Minecraft world's folder.    - Inside the world folder, open the datapacks folder.    - Move or copy the zipped datapack (e.g., <code>datapack.zip</code>) into the datapacks folder.  </p> </li> <li> <p>Enable the Datapack:    - If the datapack is zipped, unzip it by extracting it into the datapacks folder.    - Then, either launch Minecraft and load the world, or use the following command in-game to enable the datapack:      <pre><code>/datapack enable &lt;datapack_name&gt;\n</code></pre>    - If you're creating a new world, you can enable the datapack by selecting it in the \"Datapacks\" menu when creating the world.</p> </li> <li> <p>Check if the Datapack is Active:    - You can check if the datapack is enabled by using the command:      <pre><code>/datapack list\n</code></pre>    - This will display all active datapacks in your world.</p> </li> </ol> <p>Now your datapack should be enabled, and you can start using its features in the world!</p>"},{"location":"Guides/Weapons/page2/","title":"Weapon Type Editor","text":"<ul> <li> <p>Weapon Type Editor Tutorial</p> <p></p> </li> </ul>"},{"location":"Guides/Weapons/page2/#getting-started","title":"Getting started","text":"<p>Start by launching your game with Epic Fight installed. From the main menu, click on the 'Mods' button and search for 'Epic Fight.' Once you find it, select it and click on 'Config.' This will open the editor window, allowing you to make your desired changes.</p> <p>Create your weapon type:</p> <p>Weapon Types are a data set in Epic Fight that can group items with similar properties under a shared category. Items with similar characteristics are assigned the same weapon type, an example of that would be how both the gold and iron swords share the weapon type <code>\"Sword\"</code>.</p>"},{"location":"Guides/Weapons/page2/#weapon-categories","title":"Weapon Categories","text":"<p>Weapon Categories classify weapons of similar types into distinct groups. This classification system primarily determines the visibility &amp; style of weapons when they are paired together. </p> <p></p> <p>For instance, if you hold a sword in your main hand and a dagger in your offhand, the dagger will become invisible, as they do not share the same weapon category. A spear adopts a two-handed fighting style when the offhand is empty. However, if the player equips an item categorized under the \"Shield\" weapon category, the spear switches to its one-handed combat style.</p> <p>This is an optional setting that isn\u2019t necessary for your weapon to function, but we highly recommend choosing the option that best fits your specific scenario.</p> <p>Warning</p> <p>Epic Fight does have some specific exceptions where certain weapon combinations remain visible, even if their categories differ. An example would be how shields and spears belong to different categories, but they remain visible when used together.</p>"},{"location":"Guides/Weapons/page2/#weapon-effects","title":"Weapon Effects","text":"<p>You can also customize your weapon's hit particles, hit sounds, and swing sounds:  </p> <ul> <li>Hit Particles: These are visual effects generated when you damage entities using items assigned to this weapon type.  </li> <li>Hit Sounds: These sounds play whenever you successfully hurt an entity.  </li> <li>Swing Sounds: These effects are triggered when performing an attack, regardless of whether it connects with a target.  </li> </ul>"},{"location":"Guides/Weapons/page2/#weapon-style","title":"Weapon Style","text":"<p>Defining the styles of your weapon type is a mandatory step for your datapack to function properly. Styles represent the player's current state of how the weapon is being held and used during combat.</p> <p>You can define a weapon to have one style or two distinct styles, such as One-handed and Two-handed, like the Longsword.</p>"},{"location":"Guides/Weapons/page2/#what-can-styles-do","title":"What Can Styles Do","text":"<ol> <li> <p>Customize Combo Animations    - Different styles can have unique attack combos, giving each style its own feel and combat rhythm.  </p> </li> <li> <p>Assign Innate Skills    - Styles can determine which innate skills are available to the player while using a weapon.  </p> </li> <li> <p>Conditional Styles    - You can define styles that activate based on specific play conditions. For instance, a weapon might switch to a two-handed style only when the offhand is empty.</p> </li> </ol>"},{"location":"Guides/Weapons/page2/#conditions","title":"Conditions","text":"Key Feature Arguments health Checks the entity's health. double\"comparator\": <code>enum:(greater_absolute, less_absolute, greater_ratio, less_ratio)</code> offhand_item_category Checks the weapon category of the item held in the OffHand - player_name Checks the name of the player - random_chance Checks if the random value is higher than the given argument double skill_active Checks whether a specific skill is activated - within_angle Checks if the angle towards the target is within the given argument. \"min\": double\"max\": double within_angle_horizontal Checks if the Y-axis angle towards the target is within the given argument. \"min\": double\"max\": double within_distance Checks the distance between target and attacker, if they are within the given arguments \"min\": double\"max\": double within_eye_height Checks if the Y distance between target and attacker is smaller than the attacker's eye height -"},{"location":"Guides/Weapons/page2/#comparators","title":"Comparators","text":"<p>Keys marked with arguments labeled as <code>\"double\"</code> should utilize the Double data type, commonly used in Java. It represents decimal numbers &amp; allows for precise values like <code>1.5</code>, <code>0.25</code>, or <code>10.0</code></p> <ol> <li> <p>Absolute    - Compares the entity's current health as a raw value.    - Example: If the condition is set to <code>greater-absolute</code> with a parameter of <code>10</code>, it will pass when the entity's health is greater than 10.  </p> </li> <li> <p>Ratio    - Compares the entity's current health as a percentage of its maximum health.    - Example: If you have 5 health out of a maximum of 10, your health ratio is 50%.    - Setting <code>greater-ratio 0.5</code> will pass only when the entity's health is above 50% of its maximum.  </p> </li> </ol>"},{"location":"Guides/Weapons/page2/#offhand-setup","title":"OffHand Setup","text":"<p>After setting up the basics, you can proceed to configure Offhand Validators. These allow you to control the visibility of weapons equipped in the offhand. Use the Offhand Usability checkbox to determine whether a weapon should be visible when held in the offhand.</p> <p>You can also define specific conditions under which a weapon will be visible in the offhand. For instance if a greatsword is equipped in the main hand and a regular sword is in the offhand, the player will switch to a two-handed style, in this style, the offhand item becomes invisible because two-handed weapons restrict offhand usage.</p> <p>Validators can be set up through the Offhand Visibility menu, allowing you to specify when the offhand item should or should not appear. You may also utilize the same conditions available for styles.</p>"},{"location":"Guides/Weapons/page2/#colliders","title":"Colliders","text":"<p>Collider Boxes are used in games to calculate collisions between objects. In Minecraft, you can visualize hitboxes by pressing <code>F3 + B</code>. In Epic Fight, you can either select a preset collider, or define a custom collider tailored to your weapon's needs.</p> <ul> <li>Count    - Determines how many colliders are created between the previous and current tick.</li> </ul> <p>Warning</p> <p>Setting this value too high can negatively impact performance, so adjust it carefully.</p> <p></p> <ul> <li> <p>Size    - Customize the size and position of your collider using the provided options.</p> </li> <li> <p>Center    - Is the anchor point that determines the collider's placement relative to the weapon or entity.</p> </li> </ul> <p>Use the preview screen to visualize your collider. The preview allows you to see how the collider scales and aligns with the player model.</p>"},{"location":"Guides/Weapons/page2/#combos","title":"Combos","text":"<p>Let\u2019s define the combo animations for your weapon. These control the attack animation sequences for each style you\u2019ve created. Just pick a style you\u2019ve already created, or choose something like One-handed or Two-handed. </p> <p>You must add at least one animation for:</p> <ul> <li>Combo attacks</li> <li>Dash moves</li> <li>Air slashes</li> </ul> <p>Without these, the weapon\u2019s combat won\u2019t work properly.</p>"},{"location":"Guides/Weapons/page2/#innate-skills","title":"Innate skills","text":"<p>Innate skills, are abilities that are inherent to a certain weapon style. You may learn which passives do what by playing with Epic Fight's vanilla weapons or by checking the wiki page on skills. Make sure to select a style and a skill to be used (addons may add in new innate skills to be used).</p>"},{"location":"Guides/Weapons/page2/#living-animations","title":"Living animations","text":"<p>Finally, we\u2019ll set up the weapon\u2019s living motion based on the styles you\u2019ve created. Living motion determines how the player behaves in the world, such as being idle, walking, or running.</p> <ul> <li>Merge Animations    - You can combine existing animations for a more dynamic result. Simply select the living motion you want to merge and choose an animation to combine with it.</li> </ul>"},{"location":"Guides/Weapons/page3/","title":"Custom Trails","text":"<p>In Epic Fight, we've introduced a way for users to add their own unique touch to sword trails. Not only can you customize the trail's colors, but you can also change its textures to fit your style!</p> <p>In this guide, we'll walk through the process of creating custom trails for each weapon or item.</p> <p> <p> Version Value 1.16.5 6 1.17.x 7 1.18.2 8 1.19.2 9 1.20.1 15 <p></p>"},{"location":"Guides/Weapons/page3/#making-the-packmcmeta-file","title":"Making the pack.mcmeta file","text":"<p>First, you'll need to create a pack.mcmeta file. Here's how to do it:</p> <ol> <li> <p>Create the File:    - Start by creating a new text file.    - Rename the file to <code>pack.mcmeta</code>. Ensure that file extensions are visible so you can properly change the extension (e.g., from <code>.txt</code> to <code>.mcmeta</code>).  </p> </li> <li> <p>Edit the File:    - Open the file with a text editor and add the following code for your datapack to function properly:  </p> </li> </ol> <pre><code>{\n    \"pack\":{\n        \"pack_format\":15,\n        \"description\":\"A short description on your pack\"\n        }\n}\n</code></pre>"},{"location":"Guides/Weapons/page3/#pack_format-values","title":"pack_format Values","text":""},{"location":"Guides/Weapons/page3/#making-the-folder-path","title":"Making the folder path","text":"<p>To set up the folder structure, follow these steps. Each folder or file must be nested inside the previous one in the hierarchy:  <code>assets  \"modid\"  item_skins \"registryname\".JSON</code> </p> <ul> <li> <p><code>modid</code>: The mod ID is usually the name of the mod. You can often find it by checking in-game item tooltips (press <code>F3 + H</code> to enable Advanced Tooltips) or by looking at commands or messages related to the mod. For example, if the tooltip for an item shows <code>modid:itemname</code>, the part before the colon <code>(modid)</code> is what you\u2019ll use to name the <code>\"modid\"</code> folder.</p> </li> <li> <p><code>registryname</code>: To locate an item\u2019s registry name, press <code>F3 + H</code> in-game to enable Advanced Tooltips. Then, hover over the item to view its registry name.</p> </li> </ul> Make a <code>.txt</code> file with the outlined text, then change it's type to <code>.json</code>"},{"location":"Guides/Weapons/page3/#trail-customization","title":"Trail customization","text":"<p>After creating the <code>.json</code> file, you can proceed to fully customize your trails to match your vision. This is where you define the visual characteristics of the trail, such as its color, position, behavior, and texture. Below is a detailed example and explanation of how your <code>.json</code> file should be structured: <pre><code>{\n    \"trail\": {\n        \"color\": [51, 235, 203],\n        \"begin_pos\": [0.0, 0.0, -0.2],\n        \"end_pos\": [0.0, 0.1, -0.7],\n        \"lifetime\": 4,\n        \"interpolations\": 4,\n        \"texture_path\": \"epicfight:textures/particle/swing_trail.png\",\n        \"particle_type\": \"epicfight:swing_trail\"\n    }\n}\n</code></pre>  This is an example <code>.json</code> file specifically designed for the <code>diamond_dagger</code> item in Epic Fight.   You can utilize any RGB color picker to customize the trail's color to your preference. Additionally, feel free to experiment with the various values to fine-tune the trail's appearance and behavior until it matches your vision.</p> <p> Here\u2019s a list of fields you can use in the weapon trail <code>.json</code>: Fields Info \"trail\" Defines the trail configuration inside the item skin file. \"color\" Specifies the RGB value for the trail color. \"begin_pos\" The starting position of the virtual stick that draws the trail for each frame. \"end_pos\" The ending position of the virtual stick that draws the trail for each frame. \"lifetime\" The duration (in ticks) that the trail remains visible. \"interpolations\" The number of vertices created for each tick to smooth the trail. \"texture_path\" The file path for the custom texture used for the trail. \"particle_type\" The registry name of the trail. <p></p>"},{"location":"Guides/Weapons/page3/#custom-trail-textures","title":"Custom trail textures","text":"<p>You can also create custom trail textures by following this folder structure: <code>assets/epicfight/textures/particle/\"modid\"</code>  Inside the <code>\"modid\"</code> folder, you can add as many texture files as you need. To use these textures, simply reference their file paths in the <code>\"texture_path\"</code> field of your trail <code>.json</code> customization file.  Here are some examples of trail textures used in Epic Fight:</p> <p> </p>"},{"location":"Guides/Weapons/page3/#trail-data-customization","title":"Trail data customization","text":"<p>You can also customize the trail data in-depth for each animation. For reference, you can check the examples in our repository to see how it's applied across different animation data.  Make sure to use the following folder structure to organize your animation trail data: <code>assets/epicfight/animmodels/animations/biped/combat/data/animation_name.json</code>  This structure ensures that your animation-specific trail data is properly recognized and applied during combat animations.  Here's an example of custom trail data: <pre><code>{\n    \"trail_effects\": [\n        {\n            \"start_time\": 0.05,\n            \"end_time\": 0.15,\n            \"joint\": \"Tool_R\",\n            \"item_skin_hand\": \"main_hand\"\n        }\n    ]\n}\n</code></pre></p> <p>  These fields customize the trail data for any animation: Parameters Info \"trail_effects\" Used in the animation data file to define the trail effects. \"start_time\" The time in the animation when the trail should start drawing. \"end_time\" The time in the animation when the trail should stop drawing. \"joint\" The parent joint for positioning the trail (e.g., <code>\"Tool_R\"</code>). \"item_skin_hand\" Specifies the hand where the item skin data is applied (e.g., <code>\"main_hand\"</code>). <p></p> <p>  Reference</p>"},{"location":"Misc/credits/","title":"Credits","text":"<p>"},{"location":"Misc/credits/#credits","title":"Credits","text":"<p>This section is dedicated to acknowledging and spotlighting the contributions of individuals and entities crucial to the creation of this work. Here, you'll find information about the team behind the project, including directors, writers (translators), technical crew, and other talented collaborators. Credits serve as a means to honor and recognize the hard work and dedication of everyone involved in bringing this project to fruition.</p>"},{"location":"Misc/credits/#translators","title":"Translators","text":"<p>A heartfelt thank you to our dedicated team of translators whose linguistic expertise has seamlessly brought this work to a global audience. </p>"},{"location":"Misc/credits/#spanish","title":"Spanish","text":"<ul> <li>blade_master_x</li> <li>nameed</li> <li>smokingbastard</li> </ul>"},{"location":"Misc/credits/#portuguease","title":"Portuguease","text":"<ul> <li>luke_nogami</li> <li>xablauler</li> </ul>"},{"location":"Misc/credits/#russian","title":"Russian","text":"<ul> <li>a_k1m0</li> <li>requiem4</li> </ul>"},{"location":"Misc/credits/#ukranian","title":"Ukranian","text":"<ul> <li>a_k1m0</li> <li>shape.nan</li> </ul>"},{"location":"Misc/credits/#japanese","title":"Japanese","text":"<ul> <li>ig114514</li> </ul>"},{"location":"Misc/credits/#chinese-simplified","title":"Chinese (Simplified)","text":"<ul> <li>andy852546</li> <li>kevinl2000</li> <li>icewolf8964</li> </ul>"},{"location":"Misc/credits/#korean","title":"Korean","text":"<ul> <li>yesman_0</li> </ul>"},{"location":"Misc/credits/#polish","title":"Polish","text":"<ul> <li>kilotheneko</li> </ul>"},{"location":"Misc/credits/#croatian","title":"Croatian","text":"<ul> <li>banikula</li> <li>majmun.boy</li> </ul> <p>"},{"location":"Misc/credits/#developers","title":"Developers","text":"<p>A sincere expression of gratitude to our exceptional team of developers whose innovation and expertise have been instrumental in crafting this project.</p> <p></p>"},{"location":"Misc/credits/#developers_1","title":"Developers","text":"<ul> <li>Yesman [Lead Developer]</li> <li>Reascer</li> <li>Nathan</li> <li>Gui (aka Metal)</li> <li>Sagesse</li> <li>Woody</li> </ul> <p>"},{"location":"Misc/credits/#the-team","title":"The Team","text":"<p>A resounding thank you to the incredible team behind this project. Your collective effort, synergy, and unwavering commitment have been the driving force propelling this endeavor to success.</p> <p></p>"},{"location":"Misc/credits/#the-team_1","title":"The Team","text":"<ul> <li>End_Rage (Artist)</li> <li>PhantomEye (Artist)</li> <li>Rafa (Creative Director)</li> <li>Gouki (Community Manager)</li> <li>WoodGoldTwo (Moderator)</li> <li>Smoker (Moderator)</li> <li>Retko (Moderator)</li> </ul> <p>"},{"location":"Misc/credits/#partners-contributors","title":"Partners &amp; Contributors","text":"<p>A sincere and immense appreciation goes out to our contributors &amp; partners, whose diverse talents and unwavering dedication have been the driving force behind the success of this project.</p> <p></p>"},{"location":"Misc/credits/#partners-contributors_1","title":"Partners &amp; Contributors","text":"<ul> <li>Nathan (1.19.2 port)</li> <li>Sagesse (1.20.1 port)</li> <li>AzureDoom (AzureLib support)</li> <li>InteJason (DawnCraft &amp; multiple issue reports)</li> <li>Smileycorp (DawnCraft &amp; Damage Source)</li> <li>Dr. Mag. (Ego Weapons &amp; Other contributions)</li> <li>nameless (Multiple Addons + Issue reports)</li> <li>VeroxUniverse (Epic Samurais)</li> <li>Blade Master X (Epic Stats)</li> <li>SchauWalki(Epic Guns)</li> <li>jvn (ACG Addon &amp; multiple contributions)</li> <li>Vanilla (Old Wiki &amp; former community manager)</li> <li>TheIronDisciple (Efm X ParaGliders)</li> <li>box (blender 3.6 json-exporter)</li> <li>Reascer (WOM &amp; API)</li> <li>eehunter (Mixin code less invasive)</li> <li>PaintNinja (Multiple contributions)</li> <li>Cyber2049 (Fix stun immunity and parry)</li> <li>Saithe6 (Fix for FakePlayers)</li> <li>Walks Von-Longberry (Multiple issue reports &amp; Voxel Duel)</li> <li>Doc (Banner Image)</li> <li>Akaleaf (Logo Inspiration &amp; Permission)</li> </ul> <p>More Contributors + Missing Ones will be added as time goes</p>"},{"location":"Misc/Gameplay/enchantments/","title":"Enchantments","text":""},{"location":"Misc/Gameplay/","title":"Gameplay","text":"<p> Tweak combat, controls, lock-on, switching items, your UI and much more ! Epic Fight also has plenty of different commands and gamerules that also allow for further customization of your game and play style. Here, I'll walk you through all customization options + commands... <p></p>"},{"location":"Misc/Gameplay/#controls-","title":"Controls -","text":"<ul> <li> <p> Combat | Mining modes</p> <p></p> <p>Toggle building|combat mode (default: R)</p> </li> <li> <p> Basic Attacks</p> <p></p> <p>Click on your default attack key &amp; perform basic attacks</p> </li> <li> <p> Sprint Attacks</p> <p></p> <p>Running and attacking performs sprint attacks</p> </li> <li> <p> Charging Attacks</p> <p></p> <p>Press the attack button to perform charged attacks</p> </li> <li> <p> Jump Attacks</p> <p></p> <p>Jump and attack to perform jump attacks</p> </li> <li> <p> Skills</p> <p></p> <p>Learn more about the multitude of Skills</p> </li> </ul>"},{"location":"Misc/Gameplay/#commands-","title":"Commands -","text":""},{"location":"Misc/Gameplay/#gamerules-","title":"Gamerules -","text":"<ul> <li> <p>/gamerule hasFallAnimation [true/false]</p> <ul> <li>Determines if the landing animation should play when the player takes more than a certain amount of fall damage.</li> </ul> </li> <li> <p>/gamerule weightPenalty [0~100] (default 100)</p> <ul> <li>Determines how much the player will be penalized by weight. (Attack speed and stamina consumption)</li> </ul> </li> <li> <p>/gamerule doVanillaAttack [true/false] (default true)</p> <ul> <li>Enables/Disables Vanilla attacks, if turned off, no players will be able to attack while in mining mode.</li> </ul> </li> <li> <p>/gamerule keepSkills [true/false] (default false)</p> <ul> <li>Determines if the skills the player learned will be kept after the player dies. (Simmilar to KeepInventory but for Skills)</li> </ul> </li> <li> <p>/gamerule canSwitchCombat [true/false] (default true)</p> <ul> <li>Enables/Disables the ability for players to switch between Combat - Mining modes.</li> </ul> </li> <li> <p>/gamerule globalStun [true/false] (default false)</p> <ul> <li>Applies a simple Stun to non patched entities (Entities without animations/Custom, Modded ones). (Useful when you have lots of modded entities that don't have stun animstions)</li> </ul> </li> <li> <p>/gamerule noMobsInBossfight [true/false] (default true)</p> <ul> <li>Allows you to control the spawning of endermans when ender dragon is alive. (Might affect Boss battles that disable mob spawn around them simmilarly to the Ender Dragon)</li> </ul> </li> <li> <p>/gamerule stiffComboAttacks [true/false] (default true)</p> <ul> <li>Allows you to control whether Attack Combos should lock you in place. (Great for those who feel like the animation lock is too difficult)</li> </ul> </li> </ul>"},{"location":"Misc/Gameplay/#epicfight-commands","title":"EpicFight Commands","text":"<ul> <li> <p>/epicfight mode [mining/batlle] [target]</p> <ul> <li>Allows you to set the combat mode for a certain target.</li> </ul> </li> <li> <p>/epicfight skill [add/clear/remove] [target]</p> <ul> <li>Allows you to add/remove a certain skill from a certain target.</li> <li>Allows you to wipe all the skills from a target.</li> </ul> </li> </ul>"},{"location":"Misc/Gameplay/#epicfight-attributes","title":"EpicFight Attributes","text":"<p>/attribute [target] epicfight:[attribute]</p> <ul> <li>While the /attribute command isn't necessarily an epic fight command, epic fight adds a bunch of new attributes for you to use and tweak as you like...</li> </ul> <p>List of attributes below:</p> <p> Attributes Info Armor Negation Your base Armor Negation Execution Resistance Your base Resistance to Executions Impact Your base Impact Max Strikes Your base Max Strikes Stamina Regen Your base Stamina Regeneration Staminar Your base max Stamina Stun Amor Your base max Stun Armor Weight Your base Weight <p></p>"},{"location":"Misc/Gameplay/#configurations-","title":"Configurations -","text":"<p>How many ticks it'll take for it to be recognized as a long press. * (Used for special attacks) * (Used for special mining in combat configuration)</p> <p>Enables/Disables the animated model when players are not in combat mode.</p> <ul> <li>None - Disables Epic Fight's Health Bar</li> <li>Hurt - Only enables Epic Fight's Health Bar when an entity is dealt damage</li> <li>Target - Only displays Epic Fight's Health Bar when player is looking at a targeted entity (Red Arrow on top of an entity)</li> </ul> <p>Determines whether the target indicator is displayed [On/Off]</p> <p>Automatically switches camera person, when switching between mining/combat mode.</p> <p>Enables/Disables the aim tracer when charging a projectile (i.e a Bow or Crossbow)</p> <p>Automatically enters combat mode when you are hit by a hostile entity.</p> <p>Enables Blood, when OFF turns all blood particles Yellow for sensitive presenvation to some.</p> <p>Configuration Screen for items that when held will either make you go to Combat or Mining mode.</p> <p>Debug option for TexturePack and Mod developers to export their armor model data in a pre-made Texturepack.</p> <p>Configuration Window for changing the screen coordinates of each UI element added by Epic Fight.</p> <p>Enables/Disables mining blocks while in combat mode, the long press counter can be tweaked on the Long Press Counter option.</p>"},{"location":"Misc/Gameplay/recipes/","title":"Recipes","text":"<p>In epic fight, recipes forge powerful weapons, each with a unique story, as players collect rare ingredients to shape their own battle.</p> <p>"},{"location":"Misc/Gameplay/recipes/#longsword","title":"Longsword","text":""},{"location":"Misc/Gameplay/recipes/#greatsword","title":"Greatsword","text":""},{"location":"Misc/Gameplay/recipes/#spear","title":"Spear","text":""},{"location":"Misc/Gameplay/recipes/#dagger","title":"Dagger","text":""},{"location":"Misc/Gameplay/recipes/#tachi","title":"Tachi","text":""},{"location":"Misc/Gameplay/recipes/#netherite-weapons","title":"Netherite Weapons","text":""},{"location":"Misc/Gameplay/recipes/#gloves","title":"Gloves","text":""},{"location":"Misc/Gameplay/recipes/#uchigatana-bokken","title":"Uchigatana &amp; Bokken","text":"<ul> <li>Uchigatanas, simmilarly to skill books and the Bokken, can be found in Desert Temples or Jungle Temples. They are rare weapons that cannot be craftable, and require an extra level of sword skill in order to take advantage of it's true potentials</li> </ul>"},{"location":"Misc/Gameplay/skills/","title":"Skills","text":""},{"location":"Misc/Gameplay/skills/#dodge-skills","title":"Dodge Skills","text":"<p>Only one Dodge skill can be equipped at once.</p>"},{"location":"Misc/Gameplay/skills/#roll","title":"Roll","text":"<ul> <li>You can roll in all 4 directions by walking and pressing the dodge key [default = \"Left Alt\"] </li> <li>While executing this skill you are immune to physical attacks </li> <li>This skill requires 4 Stamina points to use (configurable with datapacks) </li> <li>The stamina impact and speed of the skill are affected by the \"weight\" of your armor </li> </ul>"},{"location":"Misc/Gameplay/skills/#step","title":"Step","text":"<ul> <li>You can step in all 4 directions by walking and pressing the dodge key [default = \"Left Alt\"] </li> <li>While executing this skill you are immune to physical attacks </li> <li>This skill requires 3 Stamina points to use (configurable with datapacks) </li> <li>The stamina impact and speed of the skill are affected by the \"weight\" of your armor </li> </ul>"},{"location":"Misc/Gameplay/skills/#guard-skills","title":"Guard Skills","text":"<p>Guard skill can always be equipped but only one addon can be equipped at once.</p>"},{"location":"Misc/Gameplay/skills/#guard","title":"Guard","text":"<ul> <li>You can block attacks by pressing the default use item key [default = Right Mouse Button] </li> <li>While blocking a hit, you get stunned for a short time </li> <li>As consecutive blocks are performed without pauses, stamina use increases (x0.6 to x1.2) </li> <li>Learn Parrying or Impact Guard skills to reduce consecutive block penalties </li> </ul> <p> Available Weapon Types Sword Axe Longsword Greatsword Spear Tachi Uchigatana <p></p>"},{"location":"Misc/Gameplay/skills/#parrying","title":"Parrying","text":"<ul> <li>Avoid consecutive penalties by timing blocks to match enemy attacks with this skill </li> <li>You will be able to block projectiles </li> <li>The Guard skill needs to be learned first, to learn the Parrying skill </li> </ul> <p> Available Weapon Types Sword Longsword Tachi Uchigatana <p></p>"},{"location":"Misc/Gameplay/skills/#impact-guard","title":"Impact Guard","text":"<ul> <li>This skill will reduce the consecutive block penalty, from 0.6 per stack to 0.2 </li> <li>Block explosions, fire, projectiles, and magic with 80% reduced damage </li> <li>The Guard skill needs to be learned first, to learn the Impact Guard skill </li> </ul> <p> Available Weapon Types Spear Longsword Tachi Greatsword <p></p>"},{"location":"Misc/Gameplay/skills/#passive-skills","title":"Passive Skills","text":"<p>You have access to 3 Passive Skill Slots, and only one may be equipped per slot.</p>"},{"location":"Misc/Gameplay/skills/#technician","title":"Technician","text":"<ul> <li>Dodge in sync with enemy attacks to regain used stamina </li> <li>Grants +0.4 Stamina Regen </li> </ul>"},{"location":"Misc/Gameplay/skills/#berserker","title":"Berserker","text":"<ul> <li>Gain 0.3% DMG and 0.5% SPD boost per 1% lost health (e.g, 9/10\u2661 = 3%+ DMG|5%+ SPD) </li> <li>Limiting attack speed increase to 5% (e.g., 1/10\u2661 = 27%+ damage/5%+ speed) </li> <li>Grants +6 Stamina Points </li> </ul> <p>DMG = Damage | SPD = Speed</p>"},{"location":"Misc/Gameplay/skills/#sword-master","title":"Sword Master","text":"<ul> <li>This skill grants a notable boost with a 30% increase in attack speed </li> <li>Grants +0.2 Stamina Regen </li> <li>Grants +2 Stamina Points </li> </ul> <p> Available Weapon Types Sword Longsword Tachi Uchigatana <p></p>"},{"location":"Misc/Gameplay/skills/#stamina-pillager","title":"Stamina Pillager","text":"<p>GIF is unrelated, just killing a sheep for demonstration.</p> <ul> <li>Upon killing a mob, recover 30% of missing stamina (e.g., 60% -&gt; 69%/10% -&gt; 37%) </li> <li>Grants +3 Stamina points </li> <li>Grants +10% Attack Damage </li> </ul>"},{"location":"Misc/Gameplay/skills/#death-harvest","title":"Death Harvest","text":"<ul> <li>Refill weapon charge on innate skill kills, based on weapon damage and enemies defeated </li> <li>Grants +15% Attack Damage </li> </ul>"},{"location":"Misc/Gameplay/skills/#forbidden-strength","title":"Forbidden Strength","text":"<ul> <li>Enables health usage when stamina is depleted </li> <li>Grants +2 Hearts (+4 Max Health) </li> <li>Grants +5% Attack Damage </li> </ul>"},{"location":"Misc/Gameplay/skills/#emergency-escape","title":"Emergency Escape","text":"<ul> <li>Cancel your attacks with dodges </li> <li>Enables dodging even when stamina is depleted </li> <li>Grants +0.3 Stamina Regen </li> <li>Default cooldown of 15 seconds </li> </ul> <p> Available Weapon Types Sword Dagger Uchigatana <p></p>"},{"location":"Misc/Gameplay/skills/#hyper-vitality","title":"Hyper Vitality","text":"<ul> <li>Permits the use of stamina for innate weapon skills </li> <li>Applies a default 20% cooldown to the innate power of the weapon </li> <li>Grants +2 Hearts (+4 Max Health) </li> <li>Grants +2 Stamina points </li> </ul>"},{"location":"Misc/Gameplay/skills/#endurance","title":"Endurance","text":"<ul> <li>Get 12s stun resistance based on attack preparation stamina spent when hit </li> <li>Default cooldown of 30 seconds </li> <li>Costs 30% of your current stamina converting it into a 30% stun shield </li> <li>Grants +2 Hearts (+4 Max Health) </li> <li>Grants +4 Stamina points </li> </ul>"},{"location":"Misc/Gameplay/skills/#mobility-skills","title":"Mobility Skills","text":"<p>You can only enable one mobility skill, that may assist you on your movement</p>"},{"location":"Misc/Gameplay/skills/#demolition-leap","title":"Demolition Leap","text":"<ul> <li>Collect energy, propel yourself, and cut subsequent fall damage by 50%</li> <li>Can be paired with Meteor Slam for a hulk-like movement...</li> </ul>"},{"location":"Misc/Gameplay/skills/#phantom-ascent","title":"Phantom Ascent","text":"<ul> <li>Grants an additional mid-air jump (Jump ammount is configurable with datapacks) </li> </ul>"},{"location":"Misc/Gameplay/skills/#revelation-skills","title":"Revelation Skills","text":"<p>You may only learn one revelation skill at once</p>"},{"location":"Misc/Gameplay/skills/#meteor-slam","title":"Meteor Slam","text":"<ul> <li>Perform a powerful ground slam. Damage and stamina cost increase with height</li> <li>Perform a Meteor Slam by simply looking down while airborne.</li> <li>Risk damage if fall surpasses stamina limit</li> <li>Stamina consumtion is based on fall Damage</li> </ul> <p> Available Weapon Types Tachi Spear Longsword Greatsword <p></p>"},{"location":"Misc/Gameplay/skills/#revelation","title":"Revelation","text":"<ul> <li>Defend with blocks, parries, or dodges to amass revelation stacks</li> <li>Exceeding the threshold allows a powerful knockdown heavy attack to your enemies</li> </ul>"},{"location":"es/Misc/Gameplay/skills/#revelation","title":"Revelation","text":"<ul> <li>Defend with blocks, parries, or dodges to amass revelation stacks</li> <li>Exceeding the threshold allows a powerful knockdown heavy attack to your enemies</li> </ul>"},{"location":"pl/Misc/Gameplay/skills/#revelation","title":"Revelation","text":"<ul> <li>Defend with blocks, parries, or dodges to amass revelation stacks</li> <li>Exceeding the threshold allows a powerful knockdown heavy attack to your enemies</li> </ul>"},{"location":"uk/Misc/Gameplay/skills/#revelation","title":"Revelation","text":"<ul> <li>Defend with blocks, parries, or dodges to amass revelation stacks</li> <li>Exceeding the threshold allows a powerful knockdown heavy attack to your enemies</li> </ul>"},{"location":"ko/Misc/Gameplay/skills/#revelation","title":"Revelation","text":"<ul> <li>Defend with blocks, parries, or dodges to amass revelation stacks</li> <li>Exceeding the threshold allows a powerful knockdown heavy attack to your enemies</li> </ul>"}]}